{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport { IMAGE_WIDTH, IMAGE_HEIGHT, NUM_CHANNELS, BATCH_SIZE, NUM_TRAIN_ELEMENTS, NUM_TEST_ELEMENTS } from './constants';\nexport var train = function train(model, data) {\n  var numEpochs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  var metrics = ['loss', 'acc', 'val_acc'];\n  var container = {\n    name: 'Model Training',\n    styles: {\n      height: '1000px'\n    }\n  };\n  var fitCallbacks = tfvis.show.fitCallbacks(container, metrics);\n  tfvis.visor().setActiveTab('Visor');\n\n  var _tf$tidy = tf.tidy(function () {\n    var d = data.nextTrainBatch(NUM_TRAIN_ELEMENTS);\n    return [d.xs.reshape([NUM_TRAIN_ELEMENTS, IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS]), d.labels];\n  }),\n      _tf$tidy2 = _slicedToArray(_tf$tidy, 2),\n      trainXs = _tf$tidy2[0],\n      trainYs = _tf$tidy2[1];\n\n  var _tf$tidy3 = tf.tidy(function () {\n    var d = data.nextTestBatch(NUM_TEST_ELEMENTS);\n    return [d.xs.reshape([NUM_TEST_ELEMENTS, IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS]), d.labels];\n  }),\n      _tf$tidy4 = _slicedToArray(_tf$tidy3, 2),\n      testXs = _tf$tidy4[0],\n      testYs = _tf$tidy4[1];\n\n  return model.fit(trainXs, trainYs, {\n    batchSize: BATCH_SIZE,\n    validationData: [testXs, testYs],\n    epochs: numEpochs,\n    shuffle: true,\n    callbacks: fitCallbacks\n  });\n};","map":{"version":3,"sources":["C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/tfjs/train.js"],"names":["tf","tfvis","IMAGE_WIDTH","IMAGE_HEIGHT","NUM_CHANNELS","BATCH_SIZE","NUM_TRAIN_ELEMENTS","NUM_TEST_ELEMENTS","train","model","data","numEpochs","metrics","container","name","styles","height","fitCallbacks","show","visor","setActiveTab","tidy","d","nextTrainBatch","xs","reshape","labels","trainXs","trainYs","nextTestBatch","testXs","testYs","fit","batchSize","validationData","epochs","shuffle","callbacks"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,sBAAvB;AACA,SACEC,WADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,kBALF,EAMEC,iBANF,QAOO,aAPP;AASA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,IAAR,EAAiC;AAAA,MAAnBC,SAAmB,uEAAP,EAAO;AACpD,MAAMC,OAAO,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,SAAhB,CAAhB;AACA,MAAMC,SAAS,GAAG;AAChBC,IAAAA,IAAI,EAAE,gBADU;AAEhBC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV;AAFQ,GAAlB;AAIA,MAAMC,YAAY,GAAGhB,KAAK,CAACiB,IAAN,CAAWD,YAAX,CAAwBJ,SAAxB,EAAmCD,OAAnC,CAArB;AACAX,EAAAA,KAAK,CAACkB,KAAN,GAAcC,YAAd,CAA2B,OAA3B;;AAPoD,iBASzBpB,EAAE,CAACqB,IAAH,CAAQ,YAAM;AACvC,QAAMC,CAAC,GAAGZ,IAAI,CAACa,cAAL,CAAoBjB,kBAApB,CAAV;AACA,WAAO,CACLgB,CAAC,CAACE,EAAF,CAAKC,OAAL,CAAa,CACXnB,kBADW,EAEXH,YAFW,EAGXD,WAHW,EAIXE,YAJW,CAAb,CADK,EAOLkB,CAAC,CAACI,MAPG,CAAP;AASD,GAX0B,CATyB;AAAA;AAAA,MAS7CC,OAT6C;AAAA,MASpCC,OAToC;;AAAA,kBAsB3B5B,EAAE,CAACqB,IAAH,CAAQ,YAAM;AACrC,QAAMC,CAAC,GAAGZ,IAAI,CAACmB,aAAL,CAAmBtB,iBAAnB,CAAV;AACA,WAAO,CACLe,CAAC,CAACE,EAAF,CAAKC,OAAL,CAAa,CACXlB,iBADW,EAEXJ,YAFW,EAGXD,WAHW,EAIXE,YAJW,CAAb,CADK,EAOLkB,CAAC,CAACI,MAPG,CAAP;AASD,GAXwB,CAtB2B;AAAA;AAAA,MAsB7CI,MAtB6C;AAAA,MAsBrCC,MAtBqC;;AAmCpD,SAAOtB,KAAK,CAACuB,GAAN,CAAUL,OAAV,EAAmBC,OAAnB,EAA4B;AACjCK,IAAAA,SAAS,EAAE5B,UADsB;AAEjC6B,IAAAA,cAAc,EAAE,CAACJ,MAAD,EAASC,MAAT,CAFiB;AAGjCI,IAAAA,MAAM,EAAExB,SAHyB;AAIjCyB,IAAAA,OAAO,EAAE,IAJwB;AAKjCC,IAAAA,SAAS,EAAEpB;AALsB,GAA5B,CAAP;AAOD,CA1CM","sourcesContent":["import * as tf from '@tensorflow/tfjs'\nimport * as tfvis from '@tensorflow/tfjs-vis'\nimport {\n  IMAGE_WIDTH,\n  IMAGE_HEIGHT,\n  NUM_CHANNELS,\n  BATCH_SIZE,\n  NUM_TRAIN_ELEMENTS,\n  NUM_TEST_ELEMENTS\n} from './constants'\n\nexport const train = (model, data, numEpochs = 10) => {\n  const metrics = ['loss', 'acc', 'val_acc']\n  const container = {\n    name: 'Model Training',\n    styles: { height: '1000px' }\n  }\n  const fitCallbacks = tfvis.show.fitCallbacks(container, metrics)\n  tfvis.visor().setActiveTab('Visor')\n\n  const [trainXs, trainYs] = tf.tidy(() => {\n    const d = data.nextTrainBatch(NUM_TRAIN_ELEMENTS)\n    return [\n      d.xs.reshape([\n        NUM_TRAIN_ELEMENTS,\n        IMAGE_HEIGHT,\n        IMAGE_WIDTH,\n        NUM_CHANNELS\n      ]),\n      d.labels\n    ]\n  })\n\n  const [testXs, testYs] = tf.tidy(() => {\n    const d = data.nextTestBatch(NUM_TEST_ELEMENTS)\n    return [\n      d.xs.reshape([\n        NUM_TEST_ELEMENTS,\n        IMAGE_HEIGHT,\n        IMAGE_WIDTH,\n        NUM_CHANNELS\n      ]),\n      d.labels\n    ]\n  })\n\n  return model.fit(trainXs, trainYs, {\n    batchSize: BATCH_SIZE,\n    validationData: [testXs, testYs],\n    epochs: numEpochs,\n    shuffle: true,\n    callbacks: fitCallbacks\n  })\n}\n"]},"metadata":{},"sourceType":"module"}