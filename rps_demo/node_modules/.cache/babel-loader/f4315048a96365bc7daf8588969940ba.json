{"ast":null,"code":"import * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var rule = {\n  vgMark: 'rule',\n  encodeEntry: function encodeEntry(model) {\n    var markDef = model.markDef,\n        width = model.width,\n        height = model.height;\n    var orient = markDef.orient;\n\n    if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n      // Show nothing if we have none of x, y, lat, and long.\n      return {};\n    }\n\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n      align: 'ignore',\n      baseline: 'ignore',\n      color: 'include',\n      orient: 'ignore',\n      size: 'ignore'\n    })), mixins.pointOrRangePosition('x', model, {\n      defaultRef: orient === 'horizontal' ? 'zeroOrMin' : ref.mid(width),\n      defaultRef2: 'zeroOrMax',\n      range: orient !== 'vertical' // include x2 for horizontal or line segment rule\n\n    })), mixins.pointOrRangePosition('y', model, {\n      defaultRef: orient === 'vertical' ? 'zeroOrMin' : ref.mid(height),\n      defaultRef2: 'zeroOrMax',\n      range: orient !== 'horizontal' // include y2 for vertical or line segment rule\n\n    })), mixins.nonPosition('size', model, {\n      vgChannel: 'strokeWidth' // VL's rule size is strokeWidth\n\n    }));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}