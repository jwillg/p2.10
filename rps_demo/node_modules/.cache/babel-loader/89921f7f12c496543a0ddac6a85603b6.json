{"ast":null,"code":"import { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var text = {\n  vgMark: 'text',\n  encodeEntry: function encodeEntry(model) {\n    var config = model.config,\n        encoding = model.encoding,\n        width = model.width,\n        height = model.height;\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n      align: 'include',\n      baseline: 'include',\n      color: 'include',\n      size: 'ignore',\n      orient: 'ignore'\n    })), mixins.pointPosition('x', model, ref.mid(width))), mixins.pointPosition('y', model, ref.mid(height))), mixins.text(model)), mixins.nonPosition('size', model, {\n      vgChannel: 'fontSize' // VL's text size is fontSize\n\n    })), mixins.valueIfDefined('align', align(model.markDef, encoding, config))), mixins.valueIfDefined('baseline', baseline(model.markDef, encoding, config)));\n  }\n};\n\nfunction align(markDef, encoding, config) {\n  var _a;\n\n  var a = (_a = markDef.align, _a !== null && _a !== void 0 ? _a : getMarkConfig('align', markDef, config));\n\n  if (a === undefined) {\n    return 'center';\n  } // If there is a config, Vega-parser will process this already.\n\n\n  return undefined;\n}\n\nfunction baseline(markDef, encoding, config) {\n  var _a;\n\n  var b = (_a = markDef.baseline, _a !== null && _a !== void 0 ? _a : getMarkConfig('baseline', markDef, config));\n\n  if (b === undefined) {\n    return 'middle';\n  } // If there is a config, Vega-parser will process this already.\n\n\n  return undefined;\n}","map":null,"metadata":{},"sourceType":"module"}