{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Webcam from 'react-webcam';\nimport gant from './corn.png';\nimport './App.css';\nimport { RPSDataset } from './tfjs/data.js';\nimport { getAdvancedModel, getSimpleModel } from './tfjs/models.js';\nimport { train } from './tfjs/train.js';\nimport { showAccuracy, showConfusion, showExamples, doSinglePrediction } from './tfjs/evaluationHelpers.js';\nimport AdvancedModel from './AdvancedModel.js';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport * as tf from '@tensorflow/tfjs';\nvar DETECTION_PERIOD = 2000;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentModel: null,\n      webcamActive: false,\n      camMessage: '',\n      advancedDemo: false,\n      loadDataMessage: 'Load and Show Examples'\n    };\n\n    _this._renderAdvancedModel = function () {\n      if (_this.state.advancedDemo) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(AdvancedModel, {\n          key: \"advancedDemo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, \"Turn off ad-block where applicable\"));\n      }\n    };\n\n    _this._renderWebcam = function () {\n      if (_this.state.webcamActive) {\n        return React.createElement(\"div\", {\n          className: \"results\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"64x64 Input\"), React.createElement(\"canvas\", {\n          id: \"compVision\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, _this.state.camMessage), React.createElement(Webcam, {\n          ref: _this._refWeb,\n          className: \"captureCam\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }));\n      }\n    };\n\n    _this.detectWebcam =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var video, feedbackCanvas, options, predictions, camMessage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.sleep(100);\n\n            case 2:\n              video = document.querySelectorAll('.captureCam');\n              feedbackCanvas = document.getElementById('compVision'); // assure video is still shown\n\n              if (!video[0]) {\n                _context.next = 12;\n                break;\n              }\n\n              options = {\n                feedbackCanvas: feedbackCanvas\n              };\n              _context.next = 8;\n              return doSinglePrediction(_this.model, video[0], options);\n\n            case 8:\n              predictions = _context.sent;\n              camMessage = predictions.map(function (p) {\n                return \" \".concat(p.className, \": %\").concat((p.probability * 100).toFixed(2));\n              }).toString();\n\n              _this.setState({\n                camMessage: camMessage\n              });\n\n              setTimeout(_this.detectWebcam, DETECTION_PERIOD);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this._refWeb = function (webcam) {\n      _this.webcam = webcam;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      /*\n      Some code for debugging, sorrrrryyyyyy where is the best place for this?\n      */\n      window.tf = tf;\n    }\n  }, {\n    key: \"sleep\",\n    value: function sleep(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Rock Paper Scissors\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Machine Learning in the browser with TFJS\"), React.createElement(\"img\", {\n        src: \"./rps_circle.png\",\n        className: \"App-logo\",\n        alt: \"logo\",\n        id: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        className: \"App-link\",\n        href: \"https://infinite.red\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Infinite Red\"), React.createElement(\"a\", {\n        className: \"App-link\",\n        href: \"http://gantlaborde.com/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Gant Laborde\")), React.createElement(\"div\", {\n        className: \"Main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"We'll be working with a fun dataset for the classic game, \\\"Rock Paper Scissors\\\", provided here:\", ' ', React.createElement(\"a\", {\n        href: \"http://www.laurencemoroney.com/rock-paper-scissors-dataset/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Rock Paper Scissors Dataset\")), React.createElement(\"img\", {\n        src: \"./rps.jpg\",\n        alt: \"Rock Paper Scissors dataset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"We'll show progress in the TensorFlow.js Vis panel. You'll see it when you click the load and show button below. Press\", ' ', React.createElement(\"span\", {\n        className: \"cod\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"`\"), \" or \", React.createElement(\"span\", {\n        className: \"cod\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"~\"), \" key to hide this menu.\"), React.createElement(\"button\", {\n        className: \"myButton\",\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this2.setState({\n                    loadDataMessage: 'Loading 10MB Data'\n                  });\n\n                  data = new RPSDataset();\n                  _this2.data = data;\n                  _context2.next = 5;\n                  return data.load();\n\n                case 5:\n                  _context2.next = 7;\n                  return showExamples(data);\n\n                case 7:\n                  _this2.setState({\n                    loadDataMessage: 'Data Loaded!'\n                  });\n\n                case 8:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.state.loadDataMessage), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Each of the examples have been loaded now. Due to this being a browser, the data is loaded with one\", ' ', React.createElement(\"a\", {\n        href: \"./data.png\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"sprite-sheet\"), ' ', \"to get around sandboxing. My code to create sprite-sheets is available with\", ' ', React.createElement(\"a\", {\n        href: \"https://github.com/GantMan/rps_tfjs_demo\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"this repo on GitHub\"), \".\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"You now create the structure for the data, that hopefully works best.\", ' ', React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"In this situation, an advanced model is a bad choice.\"), ' ', \"An advanced model will train slower while overfitting this small and simple training data.\"), React.createElement(\"div\", {\n        className: \"GroupUp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: this.state.currentModel === 'Simple' ? 'myButton activeModel' : 'myButton',\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3() {\n          var model;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _this2.setState({\n                    currentModel: 'Simple'\n                  });\n\n                  model = getSimpleModel();\n                  tfvis.show.modelSummary({\n                    name: 'Simple Model Architecture'\n                  }, model);\n                  _this2.model = model;\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Create Simple Model\"), React.createElement(\"button\", {\n        className: this.state.currentModel === 'Advanced' ? 'myButton activeModel' : 'myButton',\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee4() {\n          var model;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _this2.setState({\n                    currentModel: 'Advanced'\n                  });\n\n                  model = getAdvancedModel();\n                  tfvis.show.modelSummary({\n                    name: 'Advanced Model Architecture'\n                  }, model);\n                  _this2.model = model;\n\n                case 4:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Create Advanced Model\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"Creating a model, is the structure and blueprint. It starts off able to, but terrible at predicting.\"), React.createElement(\"button\", {\n        className: \"myButton\",\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee5() {\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (_this2.data) {\n                    _context5.next = 2;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 2:\n                  if (_this2.model) {\n                    _context5.next = 4;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 4:\n                  _context5.next = 6;\n                  return showAccuracy(_this2.model, _this2.data);\n\n                case 6:\n                  _context5.next = 8;\n                  return showConfusion(_this2.model, _this2.data, 'Untrained Matrix');\n\n                case 8:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Check Untrained Model Results\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Train your Model with your training data. In this case 2100 labeled images, over and over... but not \", React.createElement(\"em\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"toooooo much.\")), React.createElement(\"button\", {\n        className: \"myButton\",\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee6() {\n          var numEpochs;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  if (_this2.data) {\n                    _context6.next = 2;\n                    break;\n                  }\n\n                  return _context6.abrupt(\"return\");\n\n                case 2:\n                  if (_this2.model) {\n                    _context6.next = 4;\n                    break;\n                  }\n\n                  return _context6.abrupt(\"return\");\n\n                case 4:\n                  numEpochs = _this2.state.currentModel === 'Simple' ? 12 : 20;\n                  _context6.next = 7;\n                  return train(_this2.model, _this2.data, numEpochs);\n\n                case 7:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Train Your \", this.state.currentModel, \" Model\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"Now that our model has seen some stuff\", ' ', React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"woah\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"\\uD83D\\uDE33\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }), \"It should be smarter at identifying RPS! We can now test it with 420 RPS images it's never seen before.\"), React.createElement(\"button\", {\n        className: \"myButton\",\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee7() {\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  if (_this2.data) {\n                    _context7.next = 2;\n                    break;\n                  }\n\n                  return _context7.abrupt(\"return\");\n\n                case 2:\n                  if (_this2.model) {\n                    _context7.next = 4;\n                    break;\n                  }\n\n                  return _context7.abrupt(\"return\");\n\n                case 4:\n                  _context7.next = 6;\n                  return showAccuracy(_this2.model, _this2.data, 'Trained Accuracy');\n\n                case 6:\n                  _context7.next = 8;\n                  return showConfusion(_this2.model, _this2.data, 'Trained Confusion Matrix');\n\n                case 8:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Check Model After Training\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"We can now save our trained model! We can store it via downloading it, uploading it, or place the results in localstorage for access of the browser.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"The simple model size comes out to about 48Kb, but some models can be as large as 20+MBs! It depends how simple you keep the model. If you want the model trained above, you get two files by\", ' ', React.createElement(\"a\", {\n        className: \"pointy\",\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee8() {\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  if (_this2.model) {\n                    _context8.next = 2;\n                    break;\n                  }\n\n                  return _context8.abrupt(\"return\");\n\n                case 2:\n                  _context8.next = 4;\n                  return _this2.model.save('downloads://rps-model');\n\n                case 4:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, \"clicking here\"), \". The \", React.createElement(\"span\", {\n        className: \"cod\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, \"model.json\"), \" file demonstrates the structure of the model, and the weights are our non-random trained values that make the model accurate.\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, \"Now let's see if we can test our model with the real world!\"), React.createElement(\"img\", {\n        src: \"./rps_webcam_big.jpg\",\n        className: \"demo\",\n        alt: \"webcam demo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, \"Keep in mind, the training data for this model had no background, and the model itself isn't practiced in dealing with noise and rotation. A more advanced model would do better, but for this demo you shouldn't have any problems getting consistent and accurate results. When testing on a webcam, you'll need to make the images as clean as you can. Every few seconds your webcam image will be converted to a 64x64 grayscale image for your model to classify.\"), React.createElement(\"button\", {\n        className: \"myButton\",\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee9() {\n          return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  if (_this2.model) {\n                    _context9.next = 2;\n                    break;\n                  }\n\n                  return _context9.abrupt(\"return\");\n\n                case 2:\n                  _this2.setState(function (prevState) {\n                    return {\n                      advancedDemo: false,\n                      webcamActive: !prevState.webcamActive,\n                      camMessage: ''\n                    };\n                  }, _this2.detectWebcam);\n\n                case 3:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, this.state.webcamActive ? 'Turn Webcam Off' : 'Launch Webcam'), this._renderWebcam(), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, \"Did our model work for you? Maybe it did, and maybe it didn't! It's a very simple model that we've created on very simple data. Don't feel bad if it didn't work.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, \"What does it look like to train a far more advanced model for hours that results in a 20+MB model? Here's an opportunity for you to try it yourself! This model isn't as diverse, but for demo purposes it's inspiring!\"), React.createElement(\"button\", {\n        className: \"myButton\",\n        onClick: function onClick() {\n          _this2.setState(function (prevState) {\n            return {\n              webcamActive: false,\n              advancedDemo: !prevState.advancedDemo\n            };\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, this.state.advancedDemo ? 'Turn Off Advanced Demo' : 'Show Advanced Demo'), this._renderAdvancedModel(), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, \"Machine Learning is exciting! And now you're part of it, as you trained a model right in your browser. We've only scratched the surface of what you can build. Automating with ML on computers is only limited by our imagination!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, \"If you'd like to see more applications of TensorFlow.js be sure to check out\", ' ', React.createElement(\"a\", {\n        href: \"https://nsfwjs.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, \"NSFWJS.com\"), \", or the very useful\", ' ', React.createElement(\"a\", {\n        href: \"https://nicornot.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, \"NicOrNot.com\"), \". For more entertaining applications of Machine Learning, be sure to subscribe to our\", ' ', React.createElement(\"a\", {\n        href: \"https://infinite.red/machinelearning\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, \"Newsletter\"), ' ', \"or follow my Fun Machine Learning Twitter account:\"), React.createElement(\"a\", {\n        href: \"https://twitter.com/FunMachineLearn\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"fml.png\",\n        style: {\n          width: '50%',\n          marginLeft: '25%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, \"@FunMachineLearn\"))), React.createElement(\"div\", {\n        className: \"GroupUp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"outro\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, \"Follow me (Gant Laborde) and Infinite Red for cool new experiments, and let us know what cool things you've come up with.\", ' ', React.createElement(\"em\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, \"We can help, we're available for AI consulting and training.\"))), React.createElement(\"div\", {\n        className: \"GroupUp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: gant,\n        className: \"wiggle me\",\n        alt: \"Gant Laborde\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        id: \"footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, \"Website:\", ' ', React.createElement(\"a\", {\n        href: \"http://gantlaborde.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, \"GantLaborde.com\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }, \"Twitter:\", ' ', React.createElement(\"a\", {\n        href: \"https://twitter.com/gantlaborde\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, \"@GantLaborde\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }, \"Medium:\", ' ', React.createElement(\"a\", {\n        href: \"https://medium.freecodecamp.org/@gantlaborde\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      }, \"GantLaborde\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, \"ML Twitter:\", ' ', React.createElement(\"a\", {\n        href: \"https://twitter.com/FunMachineLearn\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, \"FunMachineLearn\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }, \"GitHub:\", ' ', React.createElement(\"a\", {\n        href: \"https://github.com/GantMan/rps_tfjs_demo\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, \"RPS TFJS Demo\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, \"Newsletter:\", ' ', React.createElement(\"a\", {\n        href: \"https://infinite.red/machinelearning\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      }, \"ML Newsletter\")), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"https://infinite.red\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"./ir.svg\",\n        id: \"InfiniteRed\",\n        alt: \"Infinite Red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"GroupUp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"./ml.png\",\n        id: \"closer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        },\n        __self: this\n      }), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, \"powered by\"), React.createElement(\"img\", {\n        src: \"./TF_FullColor_Horizontal.png\",\n        id: \"closer\",\n        alt: \"Tensorflow logo\",\n        style: {\n          paddingLeft: '-40px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/App.js"],"names":["React","Component","Webcam","gant","RPSDataset","getAdvancedModel","getSimpleModel","train","showAccuracy","showConfusion","showExamples","doSinglePrediction","AdvancedModel","tfvis","tf","DETECTION_PERIOD","App","state","currentModel","webcamActive","camMessage","advancedDemo","loadDataMessage","_renderAdvancedModel","_renderWebcam","_refWeb","detectWebcam","sleep","video","document","querySelectorAll","feedbackCanvas","getElementById","options","model","predictions","map","p","className","probability","toFixed","toString","setState","setTimeout","webcam","window","ms","Promise","resolve","data","load","show","modelSummary","name","numEpochs","save","prevState","width","marginLeft","textAlign","paddingLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Webcam from 'react-webcam'\nimport gant from './corn.png'\nimport './App.css'\nimport { RPSDataset } from './tfjs/data.js'\nimport { getAdvancedModel, getSimpleModel } from './tfjs/models.js'\nimport { train } from './tfjs/train.js'\nimport {\n  showAccuracy,\n  showConfusion,\n  showExamples,\n  doSinglePrediction\n} from './tfjs/evaluationHelpers.js'\nimport AdvancedModel from './AdvancedModel.js'\nimport * as tfvis from '@tensorflow/tfjs-vis'\nimport * as tf from '@tensorflow/tfjs'\n\nconst DETECTION_PERIOD = 2000\n\nclass App extends Component {\n  state = {\n    currentModel: null,\n    webcamActive: false,\n    camMessage: '',\n    advancedDemo: false,\n    loadDataMessage: 'Load and Show Examples'\n  }\n\n  _renderAdvancedModel = () => {\n    if (this.state.advancedDemo) {\n      return (\n        <div>\n          <AdvancedModel key=\"advancedDemo\" />\n          <p>Turn off ad-block where applicable</p>\n        </div>\n      )\n    }\n  }\n\n  componentDidMount() {\n    /*\n    Some code for debugging, sorrrrryyyyyy where is the best place for this?\n    */\n    window.tf = tf\n  }\n\n  _renderWebcam = () => {\n    if (this.state.webcamActive) {\n      return (\n        <div className=\"results\">\n          <div>64x64 Input</div>\n          <canvas id=\"compVision\" />\n          <div>{this.state.camMessage}</div>\n          <Webcam ref={this._refWeb} className=\"captureCam\" />\n        </div>\n      )\n    }\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  detectWebcam = async () => {\n    await this.sleep(100)\n    const video = document.querySelectorAll('.captureCam')\n    const feedbackCanvas = document.getElementById('compVision')\n    // assure video is still shown\n    if (video[0]) {\n      const options = { feedbackCanvas }\n      const predictions = await doSinglePrediction(\n        this.model,\n        video[0],\n        options\n      )\n      const camMessage = predictions\n        .map(p => ` ${p.className}: %${(p.probability * 100).toFixed(2)}`)\n        .toString()\n      this.setState({ camMessage })\n      setTimeout(this.detectWebcam, DETECTION_PERIOD)\n    }\n  }\n\n  _refWeb = webcam => {\n    this.webcam = webcam\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Rock Paper Scissors</h2>\n          <h3>Machine Learning in the browser with TFJS</h3>\n          <img\n            src=\"./rps_circle.png\"\n            className=\"App-logo\"\n            alt=\"logo\"\n            id=\"logo\"\n          />\n          <a\n            className=\"App-link\"\n            href=\"https://infinite.red\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Infinite Red\n          </a>\n          <a\n            className=\"App-link\"\n            href=\"http://gantlaborde.com/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Gant Laborde\n          </a>\n        </header>\n        <div className=\"Main\">\n          <p>\n            We'll be working with a fun dataset for the classic game, \"Rock\n            Paper Scissors\", provided here:{' '}\n            <a\n              href=\"http://www.laurencemoroney.com/rock-paper-scissors-dataset/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Rock Paper Scissors Dataset\n            </a>\n          </p>\n          <img src=\"./rps.jpg\" alt=\"Rock Paper Scissors dataset\" />\n          <p>\n            We'll show progress in the TensorFlow.js Vis panel. You'll see it\n            when you click the load and show button below. Press{' '}\n            <span className=\"cod\">`</span> or <span className=\"cod\">~</span> key\n            to hide this menu.\n          </p>\n          <button\n            className=\"myButton\"\n            onClick={async () => {\n              this.setState({ loadDataMessage: 'Loading 10MB Data' })\n              const data = new RPSDataset()\n              this.data = data\n              await data.load()\n              await showExamples(data)\n              this.setState({ loadDataMessage: 'Data Loaded!' })\n            }}\n          >\n            {this.state.loadDataMessage}\n          </button>\n          <p>\n            Each of the examples have been loaded now. Due to this being a\n            browser, the data is loaded with one{' '}\n            <a href=\"./data.png\" target=\"_blank\" rel=\"noopener noreferrer\">\n              sprite-sheet\n            </a>{' '}\n            to get around sandboxing. My code to create sprite-sheets is\n            available with{' '}\n            <a\n              href=\"https://github.com/GantMan/rps_tfjs_demo\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              this repo on GitHub\n            </a>\n            .\n          </p>\n          <p>\n            You now create the structure for the data, that hopefully works\n            best.{' '}\n            <strong>\n              In this situation, an advanced model is a bad choice.\n            </strong>{' '}\n            An advanced model will train slower while overfitting this small and\n            simple training data.\n          </p>\n          <div className=\"GroupUp\">\n            <button\n              className={\n                this.state.currentModel === 'Simple'\n                  ? 'myButton activeModel'\n                  : 'myButton'\n              }\n              onClick={async () => {\n                this.setState({ currentModel: 'Simple' })\n                const model = getSimpleModel()\n                tfvis.show.modelSummary(\n                  { name: 'Simple Model Architecture' },\n                  model\n                )\n                this.model = model\n              }}\n            >\n              Create Simple Model\n            </button>\n            <button\n              className={\n                this.state.currentModel === 'Advanced'\n                  ? 'myButton activeModel'\n                  : 'myButton'\n              }\n              onClick={async () => {\n                this.setState({ currentModel: 'Advanced' })\n                const model = getAdvancedModel()\n                tfvis.show.modelSummary(\n                  { name: 'Advanced Model Architecture' },\n                  model\n                )\n                this.model = model\n              }}\n            >\n              Create Advanced Model\n            </button>\n          </div>\n          <p>\n            Creating a model, is the structure and blueprint. It starts off able\n            to, but terrible at predicting.\n          </p>\n          <button\n            className=\"myButton\"\n            onClick={async () => {\n              // stop errors\n              if (!this.data) return\n              if (!this.model) return\n              await showAccuracy(this.model, this.data)\n              await showConfusion(this.model, this.data, 'Untrained Matrix')\n            }}\n          >\n            Check Untrained Model Results\n          </button>\n          <p>\n            Train your Model with your training data. In this case 2100 labeled\n            images, over and over... but not <em>toooooo much.</em>\n          </p>\n          <button\n            className=\"myButton\"\n            onClick={async () => {\n              // stop errors\n              if (!this.data) return\n              if (!this.model) return\n              const numEpochs = this.state.currentModel === 'Simple' ? 12 : 20\n              await train(this.model, this.data, numEpochs)\n            }}\n          >\n            Train Your {this.state.currentModel} Model\n          </button>\n          <p>\n            Now that our model has seen some stuff{' '}\n            <span role=\"img\" aria-label=\"woah\">\n              😳\n            </span>\n            <hr />\n            It should be smarter at identifying RPS! We can now test it with 420\n            RPS images it's never seen before.\n          </p>\n          <button\n            className=\"myButton\"\n            onClick={async () => {\n              // stop errors\n              if (!this.data) return\n              if (!this.model) return\n              await showAccuracy(this.model, this.data, 'Trained Accuracy')\n              await showConfusion(\n                this.model,\n                this.data,\n                'Trained Confusion Matrix'\n              )\n            }}\n          >\n            Check Model After Training\n          </button>\n          <p>\n            We can now save our trained model! We can store it via downloading\n            it, uploading it, or place the results in localstorage for access of\n            the browser.\n          </p>\n          <p>\n            The simple model size comes out to about 48Kb, but some models can\n            be as large as 20+MBs! It depends how simple you keep the model. If\n            you want the model trained above, you get two files by{' '}\n            <a\n              className=\"pointy\"\n              onClick={async () => {\n                if (!this.model) return\n                await this.model.save('downloads://rps-model')\n              }}\n            >\n              clicking here\n            </a>\n            . The <span className=\"cod\">model.json</span> file demonstrates the\n            structure of the model, and the weights are our non-random trained\n            values that make the model accurate.\n          </p>\n          <h3>Now let's see if we can test our model with the real world!</h3>\n          <img src=\"./rps_webcam_big.jpg\" className=\"demo\" alt=\"webcam demo\" />\n          <p>\n            Keep in mind, the training data for this model had no background,\n            and the model itself isn't practiced in dealing with noise and\n            rotation. A more advanced model would do better, but for this demo\n            you shouldn't have any problems getting consistent and accurate\n            results. When testing on a webcam, you'll need to make the images as\n            clean as you can. Every few seconds your webcam image will be\n            converted to a 64x64 grayscale image for your model to classify.\n          </p>\n          <button\n            className=\"myButton\"\n            onClick={async () => {\n              // stop errors\n              if (!this.model) return\n              this.setState(\n                prevState => ({\n                  advancedDemo: false,\n                  webcamActive: !prevState.webcamActive,\n                  camMessage: ''\n                }),\n                this.detectWebcam\n              )\n            }}\n          >\n            {this.state.webcamActive ? 'Turn Webcam Off' : 'Launch Webcam'}\n          </button>\n          {this._renderWebcam()}\n          <p>\n            Did our model work for you? Maybe it did, and maybe it didn't! It's\n            a very simple model that we've created on very simple data. Don't\n            feel bad if it didn't work.\n          </p>\n          <p>\n            What does it look like to train a far more advanced model for hours\n            that results in a 20+MB model? Here's an opportunity for you to try\n            it yourself! This model isn't as diverse, but for demo purposes it's\n            inspiring!\n          </p>\n          <button\n            className=\"myButton\"\n            onClick={() => {\n              this.setState(prevState => ({\n                webcamActive: false,\n                advancedDemo: !prevState.advancedDemo\n              }))\n            }}\n          >\n            {this.state.advancedDemo\n              ? 'Turn Off Advanced Demo'\n              : 'Show Advanced Demo'}\n          </button>\n          {this._renderAdvancedModel()}\n          <p>\n            Machine Learning is exciting! And now you're part of it, as you\n            trained a model right in your browser. We've only scratched the\n            surface of what you can build. Automating with ML on computers is\n            only limited by our imagination!\n          </p>\n          <p>\n            If you'd like to see more applications of TensorFlow.js be sure to\n            check out{' '}\n            <a\n              href=\"https://nsfwjs.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              NSFWJS.com\n            </a>\n            , or the very useful{' '}\n            <a\n              href=\"https://nicornot.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              NicOrNot.com\n            </a>\n            . For more entertaining applications of Machine Learning, be sure to\n            subscribe to our{' '}\n            <a\n              href=\"https://infinite.red/machinelearning\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Newsletter\n            </a>{' '}\n            or follow my Fun Machine Learning Twitter account:\n          </p>\n\n          <a\n            href=\"https://twitter.com/FunMachineLearn\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img src=\"fml.png\" style={{ width: '50%', marginLeft: '25%' }} />\n            <p style={{ textAlign: 'center' }}>@FunMachineLearn</p>\n          </a>\n        </div>\n        <div className=\"GroupUp\">\n          <p className=\"outro\">\n            Follow me (Gant Laborde) and Infinite Red for cool new experiments,\n            and let us know what cool things you've come up with.{' '}\n            <em>\n              We can help, we're available for AI consulting and training.\n            </em>\n          </p>\n        </div>\n        <div className=\"GroupUp\">\n          <img src={gant} className=\"wiggle me\" alt=\"Gant Laborde\" />\n          <ul id=\"footer\">\n            <li>\n              Website:{' '}\n              <a\n                href=\"http://gantlaborde.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                GantLaborde.com\n              </a>\n            </li>\n            <li>\n              Twitter:{' '}\n              <a\n                href=\"https://twitter.com/gantlaborde\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                @GantLaborde\n              </a>\n            </li>\n            <li>\n              Medium:{' '}\n              <a\n                href=\"https://medium.freecodecamp.org/@gantlaborde\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                GantLaborde\n              </a>\n            </li>\n            <li>\n              ML Twitter:{' '}\n              <a\n                href=\"https://twitter.com/FunMachineLearn\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                FunMachineLearn\n              </a>\n            </li>\n            <li>\n              GitHub:{' '}\n              <a\n                href=\"https://github.com/GantMan/rps_tfjs_demo\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                RPS TFJS Demo\n              </a>\n            </li>\n            <li>\n              Newsletter:{' '}\n              <a\n                href=\"https://infinite.red/machinelearning\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                ML Newsletter\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://infinite.red\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img src=\"./ir.svg\" id=\"InfiniteRed\" alt=\"Infinite Red\" />\n              </a>\n            </li>\n          </ul>\n        </div>\n        <div className=\"GroupUp\">\n          <img src=\"./ml.png\" id=\"closer\" />\n          <h4>powered by</h4>\n          <img\n            src=\"./TF_FullColor_Horizontal.png\"\n            id=\"closer\"\n            alt=\"Tensorflow logo\"\n            style={{ paddingLeft: '-40px' }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}