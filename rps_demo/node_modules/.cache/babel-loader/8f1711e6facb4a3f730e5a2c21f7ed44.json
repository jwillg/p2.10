{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Webcam from 'react-webcam';\nimport './App.css';\nimport { RPSDataset } from './tfjs/data.js';\nimport { getAdvancedModel, getSimpleModel } from './tfjs/models.js';\nimport { train } from './tfjs/train.js';\nimport { showAccuracy, showConfusion, showExamples, doSinglePrediction } from './tfjs/evaluationHelpers.js';\nimport AdvancedModel from './AdvancedModel.js';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport * as tf from '@tensorflow/tfjs';\nvar DETECTION_PERIOD = 2000;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentModel: null,\n      webcamActive: false,\n      camMessage: '',\n      advancedDemo: false,\n      loadDataMessage: 'Load and Show Examples'\n    };\n\n    _this._renderAdvancedModel = function () {\n      if (_this.state.advancedDemo) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(AdvancedModel, {\n          key: \"advancedDemo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, \"Turn off ad-block where applicable\"));\n      }\n    };\n\n    _this._renderWebcam = function () {\n      if (_this.state.webcamActive) {\n        return React.createElement(\"div\", {\n          className: \"results\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, \"64x64 Input\"), React.createElement(\"canvas\", {\n          id: \"compVision\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, _this.state.camMessage), React.createElement(Webcam, {\n          ref: _this._refWeb,\n          className: \"captureCam\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }));\n      }\n    };\n\n    _this.detectWebcam =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var video, feedbackCanvas, options, predictions, camMessage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.sleep(100);\n\n            case 2:\n              video = document.querySelectorAll('.captureCam');\n              feedbackCanvas = document.getElementById('compVision'); // assure video is still shown\n\n              if (!video[0]) {\n                _context.next = 12;\n                break;\n              }\n\n              options = {\n                feedbackCanvas: feedbackCanvas\n              };\n              _context.next = 8;\n              return doSinglePrediction(_this.model, video[0], options);\n\n            case 8:\n              predictions = _context.sent;\n              camMessage = predictions.map(function (p) {\n                return \" \".concat(p.className, \": %\").concat((p.probability * 100).toFixed(2));\n              }).toString();\n\n              _this.setState({\n                camMessage: camMessage\n              });\n\n              setTimeout(_this.detectWebcam, DETECTION_PERIOD);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this._refWeb = function (webcam) {\n      _this.webcam = webcam;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      /*\n      Some code for debugging, sorrrrryyyyyy where is the best place for this?\n      */\n      window.tf = tf;\n    }\n  }, {\n    key: \"sleep\",\n    value: function sleep(ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Rock Paper Scissors\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Machine Learning in the browser with TFJS\")), React.createElement(\"div\", {\n        className: \"Main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"myButton\",\n        onClick: function onClick() {\n          _this2.setState(function (prevState) {\n            return {\n              webcamActive: false,\n              advancedDemo: !prevState.advancedDemo\n            };\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, this.state.advancedDemo ? 'Turn Off Advanced Demo' : 'Show Advanced Demo'), this._renderAdvancedModel()));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/App.js"],"names":["React","Component","Webcam","RPSDataset","getAdvancedModel","getSimpleModel","train","showAccuracy","showConfusion","showExamples","doSinglePrediction","AdvancedModel","tfvis","tf","DETECTION_PERIOD","App","state","currentModel","webcamActive","camMessage","advancedDemo","loadDataMessage","_renderAdvancedModel","_renderWebcam","_refWeb","detectWebcam","sleep","video","document","querySelectorAll","feedbackCanvas","getElementById","options","model","predictions","map","p","className","probability","toFixed","toString","setState","setTimeout","webcam","window","ms","Promise","resolve","prevState"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,WAAP;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,kBAAjD;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,kBAJF,QAKO,6BALP;AAMA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,sBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AAEA,IAAMC,gBAAgB,GAAG,IAAzB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,YAAY,EAAE,IADR;AAENC,MAAAA,YAAY,EAAE,KAFR;AAGNC,MAAAA,UAAU,EAAE,EAHN;AAINC,MAAAA,YAAY,EAAE,KAJR;AAKNC,MAAAA,eAAe,EAAE;AALX,K;;UAQRC,oB,GAAuB,YAAM;AAC3B,UAAI,MAAKN,KAAL,CAAWI,YAAf,EAA6B;AAC3B,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,aAAD;AAAe,UAAA,GAAG,EAAC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAFF,CADF;AAMD;AACF,K;;UASDG,a,GAAgB,YAAM;AACpB,UAAI,MAAKP,KAAL,CAAWE,YAAf,EAA6B;AAC3B,eACE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAQ,UAAA,EAAE,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAM,MAAKF,KAAL,CAAWG,UAAjB,CAHF,EAIE,oBAAC,MAAD;AAAQ,UAAA,GAAG,EAAE,MAAKK,OAAlB;AAA2B,UAAA,SAAS,EAAC,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,CADF;AAQD;AACF,K;;UAMDC,Y;;;;6BAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACP,MAAKC,KAAL,CAAW,GAAX,CADO;;AAAA;AAEPC,cAAAA,KAFO,GAECC,QAAQ,CAACC,gBAAT,CAA0B,aAA1B,CAFD;AAGPC,cAAAA,cAHO,GAGUF,QAAQ,CAACG,cAAT,CAAwB,YAAxB,CAHV,EAIb;;AAJa,mBAKTJ,KAAK,CAAC,CAAD,CALI;AAAA;AAAA;AAAA;;AAMLK,cAAAA,OANK,GAMK;AAAEF,gBAAAA,cAAc,EAAdA;AAAF,eANL;AAAA;AAAA,qBAOepB,kBAAkB,CAC1C,MAAKuB,KADqC,EAE1CN,KAAK,CAAC,CAAD,CAFqC,EAG1CK,OAH0C,CAPjC;;AAAA;AAOLE,cAAAA,WAPK;AAYLf,cAAAA,UAZK,GAYQe,WAAW,CAC3BC,GADgB,CACZ,UAAAC,CAAC;AAAA,kCAAQA,CAAC,CAACC,SAAV,gBAAyB,CAACD,CAAC,CAACE,WAAF,GAAgB,GAAjB,EAAsBC,OAAtB,CAA8B,CAA9B,CAAzB;AAAA,eADW,EAEhBC,QAFgB,EAZR;;AAeX,oBAAKC,QAAL,CAAc;AAAEtB,gBAAAA,UAAU,EAAVA;AAAF,eAAd;;AACAuB,cAAAA,UAAU,CAAC,MAAKjB,YAAN,EAAoBX,gBAApB,CAAV;;AAhBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAoBfU,O,GAAU,UAAAmB,MAAM,EAAI;AAClB,YAAKA,MAAL,GAAcA,MAAd;AACD,K;;;;;;;wCA9CmB;AAClB;;;AAGAC,MAAAA,MAAM,CAAC/B,EAAP,GAAYA,EAAZ;AACD;;;0BAeKgC,E,EAAI;AACR,aAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,eAAIL,UAAU,CAACK,OAAD,EAAUF,EAAV,CAAd;AAAA,OAAnB,CAAP;AACD;;;6BA0BQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,CADF,EAME;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,OAAO,EAAE,mBAAM;AACb,UAAA,MAAI,CAACJ,QAAL,CAAc,UAAAO,SAAS;AAAA,mBAAK;AAC1B9B,cAAAA,YAAY,EAAE,KADY;AAE1BE,cAAAA,YAAY,EAAE,CAAC4B,SAAS,CAAC5B;AAFC,aAAL;AAAA,WAAvB;AAID,SAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASG,KAAKJ,KAAL,CAAWI,YAAX,GACG,wBADH,GAEG,oBAXN,CAJF,EAiBG,KAAKE,oBAAL,EAjBH,CANF,CADF;AAgCD;;;;EArGerB,S;;AAwGlB,eAAec,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Webcam from 'react-webcam'\nimport './App.css'\nimport { RPSDataset } from './tfjs/data.js'\nimport { getAdvancedModel, getSimpleModel } from './tfjs/models.js'\nimport { train } from './tfjs/train.js'\nimport {\n  showAccuracy,\n  showConfusion,\n  showExamples,\n  doSinglePrediction\n} from './tfjs/evaluationHelpers.js'\nimport AdvancedModel from './AdvancedModel.js'\nimport * as tfvis from '@tensorflow/tfjs-vis'\nimport * as tf from '@tensorflow/tfjs'\n\nconst DETECTION_PERIOD = 2000\n\nclass App extends Component {\n  state = {\n    currentModel: null,\n    webcamActive: false,\n    camMessage: '',\n    advancedDemo: false,\n    loadDataMessage: 'Load and Show Examples'\n  }\n\n  _renderAdvancedModel = () => {\n    if (this.state.advancedDemo) {\n      return (\n        <div>\n          <AdvancedModel key=\"advancedDemo\" />\n          <p>Turn off ad-block where applicable</p>\n        </div>\n      )\n    }\n  }\n\n  componentDidMount() {\n    /*\n    Some code for debugging, sorrrrryyyyyy where is the best place for this?\n    */\n    window.tf = tf\n  }\n\n  _renderWebcam = () => {\n    if (this.state.webcamActive) {\n      return (\n        <div className=\"results\">\n          <div>64x64 Input</div>\n          <canvas id=\"compVision\" />\n          <div>{this.state.camMessage}</div>\n          <Webcam ref={this._refWeb} className=\"captureCam\" />\n        </div>\n      )\n    }\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  detectWebcam = async () => {\n    await this.sleep(100)\n    const video = document.querySelectorAll('.captureCam')\n    const feedbackCanvas = document.getElementById('compVision')\n    // assure video is still shown\n    if (video[0]) {\n      const options = { feedbackCanvas }\n      const predictions = await doSinglePrediction(\n        this.model,\n        video[0],\n        options\n      )\n      const camMessage = predictions\n        .map(p => ` ${p.className}: %${(p.probability * 100).toFixed(2)}`)\n        .toString()\n      this.setState({ camMessage })\n      setTimeout(this.detectWebcam, DETECTION_PERIOD)\n    }\n  }\n\n  _refWeb = webcam => {\n    this.webcam = webcam\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Rock Paper Scissors</h2>\n          <h3>Machine Learning in the browser with TFJS</h3>\n\n        </header>\n        <div className=\"Main\">\n\n\n\n          <button\n            className=\"myButton\"\n            onClick={() => {\n              this.setState(prevState => ({\n                webcamActive: false,\n                advancedDemo: !prevState.advancedDemo\n              }))\n            }}\n          >\n            {this.state.advancedDemo\n              ? 'Turn Off Advanced Demo'\n              : 'Show Advanced Demo'}\n          </button>\n          {this._renderAdvancedModel()}\n\n\n\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}