{"ast":null,"code":"import { isNumber } from 'vega-util';\nimport { isBinned, isBinning } from '../../bin';\nimport { getBand, isFieldDef, isPositionFieldDef } from '../../channeldef';\nimport { DEFAULT_STEP, getViewConfigDiscreteStep } from '../../config';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var rect = {\n  vgMark: 'rect',\n  encodeEntry: function encodeEntry(model) {\n    return Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n      align: 'ignore',\n      baseline: 'ignore',\n      color: 'include',\n      orient: 'ignore',\n      size: 'ignore'\n    })), rectPosition(model, 'x', 'rect')), rectPosition(model, 'y', 'rect'));\n  }\n};\nexport function rectPosition(model, channel, mark) {\n  var _a, _b, _c, _d;\n\n  var config = model.config,\n      encoding = model.encoding,\n      markDef = model.markDef;\n  var channel2 = channel === 'x' ? 'x2' : 'y2';\n  var sizeChannel = channel === 'x' ? 'width' : 'height';\n  var fieldDef = encoding[channel];\n  var fieldDef2 = encoding[channel2];\n  var scale = model.getScaleComponent(channel);\n  var scaleType = scale ? scale.get('type') : undefined;\n  var scaleName = model.scaleName(channel);\n  var orient = markDef.orient;\n  var hasSizeDef = (_d = (_c = (_b = (_a = encoding[sizeChannel], _a !== null && _a !== void 0 ? _a : encoding.size), _b !== null && _b !== void 0 ? _b : markDef[sizeChannel]), _c !== null && _c !== void 0 ? _c : markDef.size), _d !== null && _d !== void 0 ? _d : getMarkConfig('size', markDef, config, {\n    vgChannel: sizeChannel\n  }));\n  var isBarBand = channel === 'x' ? orient === 'vertical' : orient === 'horizontal'; // x, x2, and width -- we must specify two of these in all conditions\n\n  if (isFieldDef(fieldDef) && (isBinning(fieldDef.bin) || isBinned(fieldDef.bin) || fieldDef.timeUnit && !fieldDef2) && !hasSizeDef && !hasDiscreteDomain(scaleType)) {\n    var band = getBand(channel, fieldDef, undefined, markDef, config);\n    return mixins.binPosition({\n      fieldDef: fieldDef,\n      fieldDef2: fieldDef2,\n      channel: channel,\n      markDef: markDef,\n      scaleName: scaleName,\n      band: band,\n      spacing: getFirstDefined(markDef.binSpacing, config[mark].binSpacing),\n      reverse: scale.get('reverse')\n    });\n  } else if ((isFieldDef(fieldDef) && hasDiscreteDomain(scaleType) || isBarBand) && !fieldDef2) {\n    // vertical\n    if (isFieldDef(fieldDef) && scaleType === ScaleType.BAND) {\n      var _band = isPositionFieldDef(fieldDef) ? fieldDef.band : undefined;\n\n      return mixins.bandPosition(fieldDef, channel, model, defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config, _band));\n    } // sized bin, normal point-ordinal axis, quantitative x-axis, or no x\n\n\n    return mixins.centeredPointPositionWithSize(channel, model, ref.mid(model[sizeChannel]), defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config));\n  } else {\n    return mixins.rangePosition(channel, model, {\n      defaultRef: 'zeroOrMax',\n      defaultRef2: 'zeroOrMin'\n    });\n  }\n}\n\nfunction defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config, band) {\n  var markPropOrConfig = getFirstDefined(markDef[sizeChannel], markDef.size, // TODO: deal with sizeChannel config\n  getMarkConfig('size', markDef, config, {\n    vgChannel: sizeChannel\n  }));\n\n  if (markPropOrConfig !== undefined) {\n    return {\n      value: markPropOrConfig\n    };\n  }\n\n  if (scale) {\n    var scaleType = scale.get('type');\n\n    if (scaleType === 'point' || scaleType === 'band') {\n      if (config[mark].discreteBandSize !== undefined) {\n        return {\n          value: config[mark].discreteBandSize\n        };\n      }\n\n      if (scaleType === ScaleType.POINT) {\n        var scaleRange = scale.get('range');\n\n        if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n          return {\n            value: scaleRange.step - 2\n          };\n        }\n\n        return {\n          value: DEFAULT_STEP - 2\n        };\n      } else {\n        // BAND\n        return ref.bandRef(scaleName, band);\n      }\n    } else {\n      // continuous scale\n      return {\n        value: config[mark].continuousBandSize\n      };\n    }\n  } // No Scale\n\n\n  var step = getViewConfigDiscreteStep(config.view, sizeChannel);\n  var value = getFirstDefined( // No scale is like discrete bar (with one item)\n  config[mark].discreteBandSize, step - 2);\n  return {\n    value: value\n  };\n}","map":null,"metadata":{},"sourceType":"module"}