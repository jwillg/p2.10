{"map":"{\"version\":3,\"sources\":[\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/tfjs/constants.js\",\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/tfjs/data.js\",\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/tfjs/models.js\",\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/tfjs/train.js\",\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/tfjs/evaluationHelpers.js\",\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/AdvancedModel.js\",\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/App.js\",\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/serviceWorker.js\",\"C:/Users/jowil/Downloads/rps_tfjs_demo-master/rps_tfjs_demo-master/src/index.js\",\"C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\node_modules\\\\url-loader\\\\dist\\\\cjs.js??ref--6-oneOf-0!C:\\\\Users\\\\jowil\\\\Downloads\\\\rps_tfjs_demo-master\\\\rps_tfjs_demo-master\\\\src\\\\corn.png\"],\"names\":[\"NUM_TRAIN_ELEMENTS\",\"Math\",\"floor\",\"TRAIN_TEST_RATIO\",\"NUM_TEST_ELEMENTS\",\"RPSDataset\",\"Object\",\"classCallCheck\",\"this\",\"shuffledTrainIndex\",\"shuffledTestIndex\",\"createClass\",\"key\",\"value\",\"_load\",\"asyncToGenerator\",\"regenerator_default\",\"a\",\"mark\",\"_callee\",\"img\",\"canvas\",\"ctx\",\"imgRequest\",\"labelsRequest\",\"_ref\",\"_ref2\",\"labelsResponse\",\"_this\",\"wrap\",\"_context\",\"prev\",\"next\",\"Image\",\"document\",\"createElement\",\"getContext\",\"Promise\",\"resolve\",\"_reject\",\"crossOrigin\",\"onload\",\"width\",\"naturalWidth\",\"height\",\"naturalHeight\",\"datasetBytesBuffer\",\"ArrayBuffer\",\"NUM_DATASET_ELEMENTS\",\"chunkSize\",\"i\",\"datasetBytesView\",\"Float32Array\",\"IMAGE_WIDTH\",\"drawImage\",\"imageData\",\"getImageData\",\"x\",\"j\",\"data\",\"length\",\"datasetImages\",\"src\",\"fetch\",\"all\",\"sent\",\"slicedToArray\",\"t0\",\"Uint8Array\",\"arrayBuffer\",\"t1\",\"datasetLabels\",\"trainIndices\",\"tf\",\"createShuffledIndices\",\"testIndices\",\"trainImages\",\"slice\",\"testImages\",\"trainLabels\",\"testLabels\",\"stop\",\"apply\",\"arguments\",\"batchSize\",\"_this2\",\"nextBatch\",\"_this3\",\"index\",\"batchImagesArray\",\"batchLabelsArray\",\"idx\",\"startPoint\",\"image\",\"IMAGE_SIZE\",\"set\",\"label\",\"xs\",\"labels\",\"getAdvancedModel\",\"model\",\"add\",\"conv2d\",\"inputShape\",\"kernelSize\",\"padding\",\"filters\",\"strides\",\"activation\",\"kernelInitializer\",\"maxPooling2d\",\"poolSize\",\"batchNormalization\",\"dropout\",\"rate\",\"flatten\",\"dense\",\"units\",\"kernelRegularizer\",\"optimizer\",\"adam\",\"compile\",\"loss\",\"metrics\",\"getSimpleModel\",\"train\",\"numEpochs\",\"undefined\",\"fitCallbacks\",\"tfvis\",\"name\",\"styles\",\"setActiveTab\",\"_tf$tidy\",\"d\",\"nextTrainBatch\",\"reshape\",\"_tf$tidy2\",\"trainXs\",\"trainYs\",\"_tf$tidy3\",\"nextTestBatch\",\"_tf$tidy4\",\"testXs\",\"testYs\",\"fit\",\"validationData\",\"epochs\",\"shuffle\",\"callbacks\",\"classNames\",\"doSinglePrediction\",\"options\",\"resized\",\"logits\",\"values\",\"feedbackCanvas\",\"_args\",\"fromPixels\",\"resizeBilinear\",\"batched\",\"predict\",\"toPixels\",\"div\",\"dispose\",\"abrupt\",\"map\",\"className\",\"probability\",\"_x\",\"_x2\",\"doPrediction\",\"testDataSize\",\"testData\",\"testxs\",\"argMax\",\"preds\",\"showAccuracy\",\"_callee2\",\"title\",\"_doPrediction\",\"_doPrediction2\",\"classAccuracy\",\"container\",\"_args2\",\"_context2\",\"perClassAccuracy\",\"tab\",\"_x3\",\"_x4\",\"showConfusion\",\"_ref3\",\"_callee3\",\"_doPrediction3\",\"_doPrediction4\",\"confusionMatrix\",\"_args3\",\"_context3\",\"tickLabels\",\"_x5\",\"_x6\",\"showExamples\",\"_ref4\",\"_callee5\",\"surface\",\"examples\",\"_context5\",\"forEach\",\"_ref5\",\"_callee4\",\"tensor\",\"imageTensor\",\"_context4\",\"style\",\"drawArea\",\"appendChild\",\"_x8\",\"_x7\",\"TFWrapper\",\"detect\",\"input\",\"expandDims\",\"shape\",\"executeAsync\",\"then\",\"result\",\"scores\",\"dataSync\",\"boxes\",\"_calculateMaxScores\",\"numBoxes\",\"numClasses\",\"maxes\",\"classes\",\"max\",\"Number\",\"MIN_VALUE\",\"calculateMaxScores\",\"_calculateMaxScores2\",\"maxScores\",\"prevBackend\",\"indexTensor\",\"boxes2\",\"nonMaxSuppression\",\"indexes\",\"count\",\"objects\",\"bbox\",\"minY\",\"minX\",\"maxY\",\"maxX\",\"push\",\"class\",\"score\",\"buildDetectedObjects\",\"AdvancedModel\",\"videoRef\",\"React\",\"createRef\",\"canvasRef\",\"state\",\"loading\",\"componentWillUnmount\",\"window\",\"stream\",\"getTracks\",\"track\",\"detectFrame\",\"video\",\"predictions\",\"renderPredictions\",\"requestAnimationFrame\",\"current\",\"clearRect\",\"font\",\"textBaseline\",\"prediction\",\"y\",\"parseInt\",\"strokeStyle\",\"lineWidth\",\"strokeRect\",\"fillStyle\",\"textWidth\",\"measureText\",\"textHeight\",\"fillRect\",\"fillText\",\"navigator\",\"mediaDevices\",\"getUserMedia\",\"webCamPromise\",\"audio\",\"facingMode\",\"srcObject\",\"_\",\"onloadedmetadata\",\"modelPromise\",\"ADV_RPS_MODEL_URL\",\"labelsPromise\",\"json\",\"_values\",\"setState\",\"catch\",\"error\",\"console\",\"react_default\",\"id\",\"autoPlay\",\"playsInline\",\"muted\",\"ref\",\"Component\",\"DETECTION_PERIOD\",\"App\",\"currentModel\",\"webcamActive\",\"camMessage\",\"advancedDemo\",\"loadDataMessage\",\"_renderAdvancedModel\",\"AdvancedModel_AdvancedModel\",\"_renderWebcam\",\"react_webcam_default\",\"_refWeb\",\"detectWebcam\",\"sleep\",\"querySelectorAll\",\"getElementById\",\"p\",\"concat\",\"toFixed\",\"toString\",\"setTimeout\",\"webcam\",\"ms\",\"alt\",\"href\",\"target\",\"rel\",\"onClick\",\"load\",\"modelSummary\",\"_callee6\",\"_context6\",\"role\",\"aria-label\",\"_callee7\",\"_context7\",\"_callee8\",\"_context8\",\"save\",\"_callee9\",\"_context9\",\"prevState\",\"marginLeft\",\"textAlign\",\"gant\",\"paddingLeft\",\"Boolean\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\",\"module\",\"exports\",\"__webpack_require__\"],\"mappings\":\"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\",\"sourcesContent\":[\"export const IMAGE_WIDTH = 64\\nexport const IMAGE_HEIGHT = 64\\nexport const IMAGE_SIZE = IMAGE_WIDTH * IMAGE_HEIGHT // Width of Spritesheet\\nexport const NUM_CLASSES = 3\\nexport const NUM_DATASET_ELEMENTS = 2520 // Height of Spritesheet\\nexport const BYTES_PER_UINT8 = 4\\nexport const BATCH_SIZE = 512\\n\\n// 1, 3, or 4 (Red+Green+Blue+Alpha)\\nexport const NUM_CHANNELS = 3\\n\\n// Break up dataset into train/test count\\nexport const TRAIN_TEST_RATIO = 5 / 6\\nexport const NUM_TRAIN_ELEMENTS = Math.floor(\\n  TRAIN_TEST_RATIO * NUM_DATASET_ELEMENTS\\n)\\nexport const NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS\\n\",\"import * as tf from '@tensorflow/tfjs'\\nimport {\\n  IMAGE_SIZE,\\n  NUM_CLASSES,\\n  NUM_DATASET_ELEMENTS,\\n  NUM_CHANNELS,\\n  BYTES_PER_UINT8,\\n  NUM_TRAIN_ELEMENTS,\\n  NUM_TEST_ELEMENTS\\n} from './constants'\\n\\nconst RPS_IMAGES_SPRITE_PATH = '/data.png'\\nconst RPS_LABELS_PATH = '/labels_uint8'\\n\\nexport class RPSDataset {\\n  constructor() {\\n    this.shuffledTrainIndex = 0\\n    this.shuffledTestIndex = 0\\n  }\\n\\n  async load() {\\n    // Make a request for the RPS sprited image.\\n    const img = new Image()\\n    const canvas = document.createElement('canvas')\\n    const ctx = canvas.getContext('2d')\\n    // Load full dataset sprite\\n    const imgRequest = new Promise((resolve, _reject) => {\\n      img.crossOrigin = ''\\n      img.onload = () => {\\n        img.width = img.naturalWidth\\n        img.height = img.naturalHeight\\n\\n        // Every possible pixel and value\\n        const datasetBytesBuffer = new ArrayBuffer(\\n          NUM_DATASET_ELEMENTS * IMAGE_SIZE * BYTES_PER_UINT8 * NUM_CHANNELS // * 4 because number of bytes\\n        )\\n\\n        // Chunk size: ratio of Test set size (tweak as needed)\\n        const chunkSize = Math.floor(NUM_TEST_ELEMENTS * 0.15)\\n        canvas.width = img.width\\n        canvas.height = chunkSize\\n\\n        // Read in images in chunkSize for speed\\n        for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\\n          const datasetBytesView = new Float32Array(\\n            datasetBytesBuffer, // buffer\\n            i * chunkSize * IMAGE_SIZE * BYTES_PER_UINT8 * NUM_CHANNELS, // byteOffset * 4 because RGBA format\\n            IMAGE_SIZE * chunkSize * NUM_CHANNELS // length\\n          )\\n          ctx.drawImage(\\n            img,\\n            0,\\n            i * chunkSize,\\n            img.width,\\n            chunkSize,\\n            0,\\n            0,\\n            img.width,\\n            chunkSize\\n          )\\n\\n          // RGBA of image pixels (0-255)\\n          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\\n          let x = 0\\n          // Jumps by 4 storing RGBA\\n          for (let j = 0; j < imageData.data.length; j += 4) {\\n            // Stores R, then G, then B, then A\\n            for (let i = 0; i < NUM_CHANNELS; i++) {\\n              datasetBytesView[x++] = imageData.data[j + i] / 255\\n            }\\n          }\\n        }\\n        this.datasetImages = new Float32Array(datasetBytesBuffer)\\n        resolve()\\n      }\\n      img.src = RPS_IMAGES_SPRITE_PATH\\n    })\\n\\n    const labelsRequest = fetch(RPS_LABELS_PATH)\\n    const [_imgResponse, labelsResponse] = await Promise.all([\\n      imgRequest,\\n      labelsRequest\\n    ])\\n\\n    this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer())\\n\\n    // Create shuffled indices into the train/test set for when we select a\\n    // random dataset element for training / validation.\\n    this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS)\\n    this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS)\\n\\n    // Slice the the images and labels into train and test sets.\\n    // This style of slicing hopes that they have been randomized BEFORE\\n    // they show up here.  Otherwise your test set might be all the same class\\n    // UGH!  I guess double randomization is fine.\\n    this.trainImages = this.datasetImages.slice(\\n      0,\\n      IMAGE_SIZE * NUM_TRAIN_ELEMENTS * NUM_CHANNELS\\n    )\\n    this.testImages = this.datasetImages.slice(\\n      IMAGE_SIZE * NUM_TRAIN_ELEMENTS * NUM_CHANNELS\\n    )\\n    this.trainLabels = this.datasetLabels.slice(\\n      0,\\n      NUM_CLASSES * NUM_TRAIN_ELEMENTS\\n    )\\n    this.testLabels = this.datasetLabels.slice(NUM_CLASSES * NUM_TRAIN_ELEMENTS)\\n  }\\n\\n  nextTrainBatch(batchSize) {\\n    return this.nextBatch(\\n      batchSize,\\n      [this.trainImages, this.trainLabels],\\n      () => {\\n        this.shuffledTrainIndex =\\n          (this.shuffledTrainIndex + 1) % this.trainIndices.length\\n        return this.trainIndices[this.shuffledTrainIndex]\\n        // return this.shuffledTrainIndex // For debugging, no rando\\n      }\\n    )\\n  }\\n\\n  nextTestBatch(batchSize) {\\n    return this.nextBatch(batchSize, [this.testImages, this.testLabels], () => {\\n      this.shuffledTestIndex =\\n        (this.shuffledTestIndex + 1) % this.testIndices.length\\n      return this.testIndices[this.shuffledTestIndex]\\n      // return this.shuffledTestIndex // For debugging, no rando\\n    })\\n  }\\n\\n  nextBatch(batchSize, data, index) {\\n    const batchImagesArray = new Float32Array(\\n      batchSize * IMAGE_SIZE * NUM_CHANNELS\\n    )\\n    const batchLabelsArray = new Uint8Array(batchSize * NUM_CLASSES)\\n\\n    // Create a batchSize of images\\n    for (let i = 0; i < batchSize; i++) {\\n      const idx = index()\\n\\n      const startPoint = idx * IMAGE_SIZE * NUM_CHANNELS\\n      const image = data[0].slice(\\n        startPoint,\\n        startPoint + IMAGE_SIZE * NUM_CHANNELS\\n      )\\n      batchImagesArray.set(image, i * IMAGE_SIZE * NUM_CHANNELS)\\n\\n      const label = data[1].slice(\\n        idx * NUM_CLASSES,\\n        idx * NUM_CLASSES + NUM_CLASSES\\n      )\\n      batchLabelsArray.set(label, i * NUM_CLASSES)\\n    }\\n    const xs = tf.tensor3d(batchImagesArray, [\\n      batchSize,\\n      IMAGE_SIZE,\\n      NUM_CHANNELS\\n    ])\\n    const labels = tf.tensor2d(batchLabelsArray, [batchSize, NUM_CLASSES])\\n    return { xs, labels }\\n  }\\n}\\n\",\"import * as tf from '@tensorflow/tfjs'\\nimport { IMAGE_WIDTH, IMAGE_HEIGHT, NUM_CHANNELS } from './constants'\\n\\nexport const getAdvancedModel = () => {\\n  const model = tf.sequential()\\n\\n  model.add(\\n    tf.layers.conv2d({\\n      inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, NUM_CHANNELS],\\n      kernelSize: 3,\\n      padding: 'same',\\n      filters: 32,\\n      strides: 1,\\n      activation: 'relu',\\n      kernelInitializer: 'varianceScaling'\\n    })\\n  )\\n\\n  // Downsample, batchnorm, and dropout!\\n  model.add(tf.layers.maxPooling2d({ poolSize: [2, 2], strides: [2, 2] }))\\n  model.add(tf.layers.batchNormalization())\\n  model.add(tf.layers.dropout({ rate: 0.25 }))\\n\\n  model.add(\\n    tf.layers.conv2d({\\n      kernelSize: 3,\\n      filters: 64,\\n      padding: 'same',\\n      strides: 1,\\n      activation: 'relu',\\n      kernelInitializer: 'varianceScaling'\\n    })\\n  )\\n  model.add(tf.layers.maxPooling2d({ poolSize: [2, 2], strides: [2, 2] }))\\n  model.add(tf.layers.batchNormalization())\\n  model.add(tf.layers.dropout({ rate: 0.25 }))\\n\\n  // Now we flatten the output from the 2D filters into a 1D vector to prepare\\n  // it for input into our last layer.\\n  model.add(tf.layers.flatten())\\n\\n  // complex dense intermediate\\n  model.add(\\n    tf.layers.dense({\\n      units: 512,\\n      kernelRegularizer: 'l1l2',\\n      activation: 'relu'\\n    })\\n  )\\n\\n  // Our last layer is a dense layer which has 3 output units, one for each\\n  // output class (i.e. 0, 1, 2).\\n  const NUM_OUTPUT_CLASSES = 3\\n  model.add(\\n    tf.layers.dense({\\n      units: NUM_OUTPUT_CLASSES,\\n      kernelInitializer: 'varianceScaling',\\n      activation: 'softmax'\\n    })\\n  )\\n\\n  // Choose an optimizer, loss function and accuracy metric,\\n  // then compile and return the model\\n  const optimizer = tf.train.adam()\\n  model.compile({\\n    optimizer: optimizer,\\n    loss: 'categoricalCrossentropy',\\n    metrics: ['accuracy']\\n  })\\n\\n  return model\\n}\\n\\n// The classic MNIST style model\\nexport const getSimpleModel = () => {\\n  const model = tf.sequential()\\n\\n  // In the first layer of out convolutional neural network we have\\n  // to specify the input shape. Then we specify some parameters for\\n  // the convolution operation that takes place in this layer.\\n  model.add(\\n    tf.layers.conv2d({\\n      inputShape: [IMAGE_WIDTH, IMAGE_HEIGHT, NUM_CHANNELS],\\n      kernelSize: 5,\\n      filters: 8,\\n      strides: 1,\\n      activation: 'relu',\\n      kernelInitializer: 'varianceScaling'\\n    })\\n  )\\n\\n  // The MaxPooling layer acts as a sort of downsampling using max values\\n  // in a region instead of averaging.\\n  model.add(tf.layers.maxPooling2d({ poolSize: [2, 2], strides: [2, 2] }))\\n\\n  // Repeat another conv2d + maxPooling stack.\\n  // Note that we have more filters in the convolution.\\n  model.add(\\n    tf.layers.conv2d({\\n      kernelSize: 5,\\n      filters: 16,\\n      strides: 1,\\n      activation: 'relu',\\n      kernelInitializer: 'varianceScaling'\\n    })\\n  )\\n  model.add(tf.layers.maxPooling2d({ poolSize: [2, 2], strides: [2, 2] }))\\n\\n  // Now we flatten the output from the 2D filters into a 1D vector to prepare\\n  // it for input into our last layer. This is common practice when feeding\\n  // higher dimensional data to a final classification output layer.\\n  model.add(tf.layers.flatten())\\n\\n  // Our last layer is a dense layer which has 3 output units, one for each\\n  // output class (i.e. 0, 1, 2).\\n  const NUM_OUTPUT_CLASSES = 3\\n  model.add(\\n    tf.layers.dense({\\n      units: NUM_OUTPUT_CLASSES,\\n      kernelInitializer: 'varianceScaling',\\n      activation: 'softmax'\\n    })\\n  )\\n\\n  // Choose an optimizer, loss function and accuracy metric,\\n  // then compile and return the model\\n  const optimizer = tf.train.adam()\\n  model.compile({\\n    optimizer: optimizer,\\n    loss: 'categoricalCrossentropy',\\n    metrics: ['accuracy']\\n  })\\n\\n  return model\\n}\\n\",\"import * as tf from '@tensorflow/tfjs'\\nimport * as tfvis from '@tensorflow/tfjs-vis'\\nimport {\\n  IMAGE_WIDTH,\\n  IMAGE_HEIGHT,\\n  NUM_CHANNELS,\\n  BATCH_SIZE,\\n  NUM_TRAIN_ELEMENTS,\\n  NUM_TEST_ELEMENTS\\n} from './constants'\\n\\nexport const train = (model, data, numEpochs = 10) => {\\n  const metrics = ['loss', 'acc', 'val_acc']\\n  const container = {\\n    name: 'Model Training',\\n    styles: { height: '1000px' }\\n  }\\n  const fitCallbacks = tfvis.show.fitCallbacks(container, metrics)\\n  tfvis.visor().setActiveTab('Visor')\\n\\n  const [trainXs, trainYs] = tf.tidy(() => {\\n    const d = data.nextTrainBatch(NUM_TRAIN_ELEMENTS)\\n    return [\\n      d.xs.reshape([\\n        NUM_TRAIN_ELEMENTS,\\n        IMAGE_HEIGHT,\\n        IMAGE_WIDTH,\\n        NUM_CHANNELS\\n      ]),\\n      d.labels\\n    ]\\n  })\\n\\n  const [testXs, testYs] = tf.tidy(() => {\\n    const d = data.nextTestBatch(NUM_TEST_ELEMENTS)\\n    return [\\n      d.xs.reshape([\\n        NUM_TEST_ELEMENTS,\\n        IMAGE_HEIGHT,\\n        IMAGE_WIDTH,\\n        NUM_CHANNELS\\n      ]),\\n      d.labels\\n    ]\\n  })\\n\\n  return model.fit(trainXs, trainYs, {\\n    batchSize: BATCH_SIZE,\\n    validationData: [testXs, testYs],\\n    epochs: numEpochs,\\n    shuffle: true,\\n    callbacks: fitCallbacks\\n  })\\n}\\n\",\"import * as tf from '@tensorflow/tfjs'\\nimport * as tfvis from '@tensorflow/tfjs-vis'\\nimport { IMAGE_WIDTH, IMAGE_HEIGHT, NUM_CHANNELS } from './constants'\\n\\nconst classNames = ['Rock', 'Paper', 'Scissors']\\n\\nexport const doSinglePrediction = async (model, img, options = {}) => {\\n  // First get input tensor\\n  const resized = tf.tidy(() => {\\n    img = tf.browser.fromPixels(img)\\n    if (NUM_CHANNELS === 1) {\\n      // Bring it down to gray\\n      const gray_mid = img.mean(2)\\n      img = gray_mid.expandDims(2) // back to (width, height, 1)\\n    }\\n    // assure (img.shape[0] === IMAGE_WIDTH && img.shape[1] === IMAGE_WIDTH\\n    const alignCorners = true\\n    return tf.image.resizeBilinear(\\n      img,\\n      [IMAGE_WIDTH, IMAGE_HEIGHT],\\n      alignCorners\\n    )\\n  })\\n\\n  const logits = tf.tidy(() => {\\n    // Singe-element batch\\n    const batched = resized.reshape([\\n      1,\\n      IMAGE_WIDTH,\\n      IMAGE_HEIGHT,\\n      NUM_CHANNELS\\n    ])\\n\\n    // return the logits\\n    return model.predict(batched)\\n  })\\n\\n  const values = await logits.data()\\n\\n  // if we want a visual\\n  const { feedbackCanvas } = options\\n  if (feedbackCanvas) {\\n    await tf.browser.toPixels(resized.div(tf.scalar(255)), feedbackCanvas)\\n  }\\n  // cleanup tensors\\n  resized.dispose()\\n  logits.dispose()\\n  // return class + prediction of all\\n  return classNames.map((className, idx) => ({\\n    className,\\n    probability: values[idx]\\n  }))\\n}\\n\\nconst doPrediction = (model, data, testDataSize = 420) => {\\n  const testData = data.nextTestBatch(testDataSize)\\n  const testxs = testData.xs.reshape([\\n    testDataSize,\\n    IMAGE_WIDTH,\\n    IMAGE_HEIGHT,\\n    NUM_CHANNELS\\n  ])\\n  const labels = testData.labels.argMax([-1])\\n  const preds = model.predict(testxs).argMax([-1])\\n\\n  testxs.dispose()\\n  return [preds, labels]\\n}\\n\\nexport const showAccuracy = async (model, data, title = 'Accuracy') => {\\n  const [preds, labels] = doPrediction(model, data)\\n  const classAccuracy = await tfvis.metrics.perClassAccuracy(labels, preds)\\n  const container = { name: title, tab: 'Evaluation' }\\n  tfvis.show.perClassAccuracy(container, classAccuracy, classNames)\\n  tfvis.visor().setActiveTab('Evaluation')\\n\\n  labels.dispose()\\n}\\n\\nexport const showConfusion = async (\\n  model,\\n  data,\\n  title = 'Confusion Matrix'\\n) => {\\n  const [preds, labels] = doPrediction(model, data)\\n  const confusionMatrix = await tfvis.metrics.confusionMatrix(labels, preds)\\n  const container = { name: title, tab: 'Evaluation' }\\n  tfvis.render.confusionMatrix(container, {\\n    values: confusionMatrix,\\n    tickLabels: classNames\\n  })\\n\\n  labels.dispose()\\n}\\n\\nexport const showExamples = async data => {\\n  // Create a container in the visor\\n  const surface = tfvis\\n    .visor()\\n    .surface({ name: 'RPS Data Examples', tab: 'Input Data' })\\n\\n  // Get the examples\\n  const examples = data.nextTestBatch(42)\\n\\n  tf.unstack(examples.xs).forEach(async tensor => {\\n    const imageTensor = tensor.reshape([\\n      IMAGE_WIDTH,\\n      IMAGE_HEIGHT,\\n      NUM_CHANNELS\\n    ])\\n    // Re-organize to be num_channels last\\n    const canvas = document.createElement('canvas')\\n    canvas.width = IMAGE_WIDTH\\n    canvas.height = IMAGE_HEIGHT\\n    canvas.style = 'margin: 4px;'\\n    await tf.browser.toPixels(imageTensor, canvas)\\n    surface.drawArea.appendChild(canvas)\\n\\n    tensor.dispose()\\n    imageTensor.dispose()\\n  })\\n}\\n\\n// provided by https://github.com/cloud-annotations/object-detection-react\\n// trained via IBM cloud https://cloud-annotations.github.io/training/object-detection/cli/index.html\\nexport const TFWrapper = model => {\\n  const calculateMaxScores = (scores, numBoxes, numClasses) => {\\n    const maxes = []\\n    const classes = []\\n    for (let i = 0; i < numBoxes; i++) {\\n      let max = Number.MIN_VALUE\\n      let index = -1\\n      for (let j = 0; j < numClasses; j++) {\\n        if (scores[i * numClasses + j] > max) {\\n          max = scores[i * numClasses + j]\\n          index = j\\n        }\\n      }\\n      maxes[i] = max\\n      classes[i] = index\\n    }\\n    return [maxes, classes]\\n  }\\n\\n  const buildDetectedObjects = (\\n    width,\\n    height,\\n    boxes,\\n    scores,\\n    indexes,\\n    classes\\n  ) => {\\n    const count = indexes.length\\n    const objects = []\\n    for (let i = 0; i < count; i++) {\\n      const bbox = []\\n      for (let j = 0; j < 4; j++) {\\n        bbox[j] = boxes[indexes[i] * 4 + j]\\n      }\\n      const minY = bbox[0] * height\\n      const minX = bbox[1] * width\\n      const maxY = bbox[2] * height\\n      const maxX = bbox[3] * width\\n      bbox[0] = minX\\n      bbox[1] = minY\\n      bbox[2] = maxX - minX\\n      bbox[3] = maxY - minY\\n      objects.push({\\n        bbox: bbox,\\n        class: classes[indexes[i]],\\n        score: scores[indexes[i]]\\n      })\\n    }\\n    return objects\\n  }\\n\\n  const detect = input => {\\n    const batched = tf.tidy(() => {\\n      const img = tf.browser.fromPixels(input)\\n      // Reshape to a single-element batch so we can pass it to executeAsync.\\n      return img.expandDims(0)\\n    })\\n\\n    const height = batched.shape[1]\\n    const width = batched.shape[2]\\n\\n    return model.executeAsync(batched).then(result => {\\n      const scores = result[0].dataSync()\\n      const boxes = result[1].dataSync()\\n\\n      // clean the webgl tensors\\n      batched.dispose()\\n      tf.dispose(result)\\n\\n      const [maxScores, classes] = calculateMaxScores(\\n        scores,\\n        result[0].shape[1],\\n        result[0].shape[2]\\n      )\\n\\n      const prevBackend = tf.getBackend()\\n      // run post process in cpu\\n      tf.setBackend('cpu')\\n      const indexTensor = tf.tidy(() => {\\n        const boxes2 = tf.tensor2d(boxes, [\\n          result[1].shape[1],\\n          result[1].shape[3]\\n        ])\\n        return tf.image.nonMaxSuppression(\\n          boxes2,\\n          maxScores,\\n          20, // maxNumBoxes\\n          0.5, // iou_threshold\\n          0.5 // score_threshold\\n        )\\n      })\\n      const indexes = indexTensor.dataSync()\\n      indexTensor.dispose()\\n      // restore previous backend\\n      tf.setBackend(prevBackend)\\n\\n      return buildDetectedObjects(\\n        width,\\n        height,\\n        boxes,\\n        maxScores,\\n        indexes,\\n        classes\\n      )\\n    })\\n  }\\n  return {\\n    detect: detect\\n  }\\n}\\n\",\"import React from 'react'\\nimport { TFWrapper } from './tfjs/evaluationHelpers'\\nimport * as tf from '@tensorflow/tfjs'\\n\\nconst ADV_RPS_MODEL_URL = process.env.PUBLIC_URL + '/adv_rps/'\\nconst ADV_LABELS_URL = ADV_RPS_MODEL_URL + 'labels.json'\\nconst ADV_MODEL_JSON = ADV_RPS_MODEL_URL + 'model.json'\\n\\nexport default class AdvancedModel extends React.Component {\\n  videoRef = React.createRef()\\n  canvasRef = React.createRef()\\n\\n  state = {\\n    loading: true\\n  }\\n\\n  componentDidMount() {\\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\\n      const webCamPromise = navigator.mediaDevices\\n        .getUserMedia({\\n          audio: false,\\n          video: {\\n            facingMode: 'user'\\n          }\\n        })\\n        .then(stream => {\\n          window.stream = stream\\n          this.videoRef.current.srcObject = stream\\n          return new Promise((resolve, _) => {\\n            this.videoRef.current.onloadedmetadata = () => {\\n              resolve()\\n            }\\n          })\\n        })\\n\\n      const modelPromise = tf.loadGraphModel(ADV_MODEL_JSON)\\n      const labelsPromise = fetch(ADV_LABELS_URL).then(data => data.json())\\n      Promise.all([modelPromise, labelsPromise, webCamPromise])\\n        .then(values => {\\n          const [model, labels] = values\\n          this.setState({ loading: false })\\n          this.detectFrame(this.videoRef.current, model, labels)\\n        })\\n        .catch(error => {\\n          console.error(error)\\n        })\\n    }\\n  }\\n\\n  componentWillUnmount = () => {\\n    // stop and collect garbage\\n    let stream = window.stream\\n    let tracks = stream.getTracks()\\n\\n    tracks.forEach(track => {\\n      track.stop()\\n    })\\n\\n    window.stream = null\\n  }\\n\\n  detectFrame = (video, model, labels) => {\\n    TFWrapper(model)\\n      .detect(video)\\n      .then(predictions => {\\n        this.renderPredictions(predictions, labels)\\n        requestAnimationFrame(() => {\\n          // calm down when hidden!\\n          if (this.canvasRef.current) {\\n            this.detectFrame(video, model, labels)\\n          }\\n        })\\n      })\\n  }\\n\\n  renderPredictions = (predictions, labels) => {\\n    if (this.canvasRef.current) {\\n      const ctx = this.canvasRef.current.getContext('2d')\\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\\n      // Font options.\\n      const font = '16px sans-serif'\\n      ctx.font = font\\n      ctx.textBaseline = 'top'\\n      predictions.forEach(prediction => {\\n        const x = prediction.bbox[0]\\n        const y = prediction.bbox[1]\\n        const width = prediction.bbox[2]\\n        const height = prediction.bbox[3]\\n        const label = labels[parseInt(prediction.class)]\\n        // Draw the bounding box.\\n        ctx.strokeStyle = '#FF0000'\\n        ctx.lineWidth = 4\\n        ctx.strokeRect(x, y, width, height)\\n        // Draw the label background.\\n        ctx.fillStyle = '#FF0000'\\n        const textWidth = ctx.measureText(label).width\\n        const textHeight = parseInt(font, 10) // base 10\\n        ctx.fillRect(x, y, textWidth + 4, textHeight + 4)\\n      })\\n\\n      predictions.forEach(prediction => {\\n        const x = prediction.bbox[0]\\n        const y = prediction.bbox[1]\\n        const label = labels[parseInt(prediction.class)]\\n        // Draw the text last to ensure it's on top.\\n        ctx.fillStyle = '#000000'\\n        ctx.fillText(label, x, y)\\n      })\\n    }\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"advancedContainer\\\">\\n        {this.state.loading && (\\n          <p id=\\\"advancedLoadText\\\">Please wait, loading advanced model</p>\\n        )}\\n        <video\\n          className=\\\"advancedCam\\\"\\n          autoPlay\\n          playsInline\\n          muted\\n          ref={this.videoRef}\\n          width=\\\"600\\\"\\n          height=\\\"500\\\"\\n        />\\n        <canvas\\n          className=\\\"advancedBox\\\"\\n          ref={this.canvasRef}\\n          width=\\\"600\\\"\\n          height=\\\"500\\\"\\n        />\\n      </div>\\n    )\\n  }\\n}\\n\",\"import React, { Component } from 'react'\\nimport Webcam from 'react-webcam'\\nimport gant from './corn.png'\\nimport './App.css'\\nimport { RPSDataset } from './tfjs/data.js'\\nimport { getAdvancedModel, getSimpleModel } from './tfjs/models.js'\\nimport { train } from './tfjs/train.js'\\nimport {\\n  showAccuracy,\\n  showConfusion,\\n  showExamples,\\n  doSinglePrediction\\n} from './tfjs/evaluationHelpers.js'\\nimport AdvancedModel from './AdvancedModel.js'\\nimport * as tfvis from '@tensorflow/tfjs-vis'\\nimport * as tf from '@tensorflow/tfjs'\\n\\nconst DETECTION_PERIOD = 2000\\n\\nclass App extends Component {\\n  state = {\\n    currentModel: null,\\n    webcamActive: false,\\n    camMessage: '',\\n    advancedDemo: false,\\n    loadDataMessage: 'Load and Show Examples'\\n  }\\n\\n  _renderAdvancedModel = () => {\\n    if (this.state.advancedDemo) {\\n      return (\\n        <div>\\n          <AdvancedModel key=\\\"advancedDemo\\\" />\\n          <p>Turn off ad-block where applicable</p>\\n        </div>\\n      )\\n    }\\n  }\\n\\n  componentDidMount() {\\n    /*\\n    Some code for debugging, sorrrrryyyyyy where is the best place for this?\\n    */\\n    window.tf = tf\\n  }\\n\\n  _renderWebcam = () => {\\n    if (this.state.webcamActive) {\\n      return (\\n        <div className=\\\"results\\\">\\n          <div>64x64 Input</div>\\n          <canvas id=\\\"compVision\\\" />\\n          <div>{this.state.camMessage}</div>\\n          <Webcam ref={this._refWeb} className=\\\"captureCam\\\" />\\n        </div>\\n      )\\n    }\\n  }\\n\\n  sleep(ms) {\\n    return new Promise(resolve => setTimeout(resolve, ms))\\n  }\\n\\n  detectWebcam = async () => {\\n    await this.sleep(100)\\n    const video = document.querySelectorAll('.captureCam')\\n    const feedbackCanvas = document.getElementById('compVision')\\n    // assure video is still shown\\n    if (video[0]) {\\n      const options = { feedbackCanvas }\\n      const predictions = await doSinglePrediction(\\n        this.model,\\n        video[0],\\n        options\\n      )\\n      const camMessage = predictions\\n        .map(p => ` ${p.className}: %${(p.probability * 100).toFixed(2)}`)\\n        .toString()\\n      this.setState({ camMessage })\\n      setTimeout(this.detectWebcam, DETECTION_PERIOD)\\n    }\\n  }\\n\\n  _refWeb = webcam => {\\n    this.webcam = webcam\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <h2>Rock Paper Scissors</h2>\\n          <h3>Machine Learning in the browser with TFJS</h3>\\n          <img\\n            src=\\\"./rps_circle.png\\\"\\n            className=\\\"App-logo\\\"\\n            alt=\\\"logo\\\"\\n            id=\\\"logo\\\"\\n          />\\n          <a\\n            className=\\\"App-link\\\"\\n            href=\\\"https://infinite.red\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noopener noreferrer\\\"\\n          >\\n            Infinite Red\\n          </a>\\n          <a\\n            className=\\\"App-link\\\"\\n            href=\\\"http://gantlaborde.com/\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noopener noreferrer\\\"\\n          >\\n            Gant Laborde\\n          </a>\\n        </header>\\n        <div className=\\\"Main\\\">\\n          <p>\\n            We'll be working with a fun dataset for the classic game, \\\"Rock\\n            Paper Scissors\\\", provided here:{' '}\\n            <a\\n              href=\\\"http://www.laurencemoroney.com/rock-paper-scissors-dataset/\\\"\\n              target=\\\"_blank\\\"\\n              rel=\\\"noopener noreferrer\\\"\\n            >\\n              Rock Paper Scissors Dataset\\n            </a>\\n          </p>\\n          <img src=\\\"./rps.jpg\\\" alt=\\\"Rock Paper Scissors dataset\\\" />\\n          <p>\\n            We'll show progress in the TensorFlow.js Vis panel. You'll see it\\n            when you click the load and show button below. Press{' '}\\n            <span className=\\\"cod\\\">`</span> or <span className=\\\"cod\\\">~</span> key\\n            to hide this menu.\\n          </p>\\n          <button\\n            className=\\\"myButton\\\"\\n            onClick={async () => {\\n              this.setState({ loadDataMessage: 'Loading 10MB Data' })\\n              const data = new RPSDataset()\\n              this.data = data\\n              await data.load()\\n              await showExamples(data)\\n              this.setState({ loadDataMessage: 'Data Loaded!' })\\n            }}\\n          >\\n            {this.state.loadDataMessage}\\n          </button>\\n          <p>\\n            Each of the examples have been loaded now. Due to this being a\\n            browser, the data is loaded with one{' '}\\n            <a href=\\\"./data.png\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\\n              sprite-sheet\\n            </a>{' '}\\n            to get around sandboxing. My code to create sprite-sheets is\\n            available with{' '}\\n            <a\\n              href=\\\"https://github.com/GantMan/rps_tfjs_demo\\\"\\n              target=\\\"_blank\\\"\\n              rel=\\\"noopener noreferrer\\\"\\n            >\\n              this repo on GitHub\\n            </a>\\n            .\\n          </p>\\n          <p>\\n            You now create the structure for the data, that hopefully works\\n            best.{' '}\\n            <strong>\\n              In this situation, an advanced model is a bad choice.\\n            </strong>{' '}\\n            An advanced model will train slower while overfitting this small and\\n            simple training data.\\n          </p>\\n          <div className=\\\"GroupUp\\\">\\n            <button\\n              className={\\n                this.state.currentModel === 'Simple'\\n                  ? 'myButton activeModel'\\n                  : 'myButton'\\n              }\\n              onClick={async () => {\\n                this.setState({ currentModel: 'Simple' })\\n                const model = getSimpleModel()\\n                tfvis.show.modelSummary(\\n                  { name: 'Simple Model Architecture' },\\n                  model\\n                )\\n                this.model = model\\n              }}\\n            >\\n              Create Simple Model\\n            </button>\\n            <button\\n              className={\\n                this.state.currentModel === 'Advanced'\\n                  ? 'myButton activeModel'\\n                  : 'myButton'\\n              }\\n              onClick={async () => {\\n                this.setState({ currentModel: 'Advanced' })\\n                const model = getAdvancedModel()\\n                tfvis.show.modelSummary(\\n                  { name: 'Advanced Model Architecture' },\\n                  model\\n                )\\n                this.model = model\\n              }}\\n            >\\n              Create Advanced Model\\n            </button>\\n          </div>\\n          <p>\\n            Creating a model, is the structure and blueprint. It starts off able\\n            to, but terrible at predicting.\\n          </p>\\n          <button\\n            className=\\\"myButton\\\"\\n            onClick={async () => {\\n              // stop errors\\n              if (!this.data) return\\n              if (!this.model) return\\n              await showAccuracy(this.model, this.data)\\n              await showConfusion(this.model, this.data, 'Untrained Matrix')\\n            }}\\n          >\\n            Check Untrained Model Results\\n          </button>\\n          <p>\\n            Train your Model with your training data. In this case 2100 labeled\\n            images, over and over... but not <em>toooooo much.</em>\\n          </p>\\n          <button\\n            className=\\\"myButton\\\"\\n            onClick={async () => {\\n              // stop errors\\n              if (!this.data) return\\n              if (!this.model) return\\n              const numEpochs = this.state.currentModel === 'Simple' ? 12 : 20\\n              await train(this.model, this.data, numEpochs)\\n            }}\\n          >\\n            Train Your {this.state.currentModel} Model\\n          </button>\\n          <p>\\n            Now that our model has seen some stuff{' '}\\n            <span role=\\\"img\\\" aria-label=\\\"woah\\\">\\n              😳\\n            </span>\\n            <hr />\\n            It should be smarter at identifying RPS! We can now test it with 420\\n            RPS images it's never seen before.\\n          </p>\\n          <button\\n            className=\\\"myButton\\\"\\n            onClick={async () => {\\n              // stop errors\\n              if (!this.data) return\\n              if (!this.model) return\\n              await showAccuracy(this.model, this.data, 'Trained Accuracy')\\n              await showConfusion(\\n                this.model,\\n                this.data,\\n                'Trained Confusion Matrix'\\n              )\\n            }}\\n          >\\n            Check Model After Training\\n          </button>\\n          <p>\\n            We can now save our trained model! We can store it via downloading\\n            it, uploading it, or place the results in localstorage for access of\\n            the browser.\\n          </p>\\n          <p>\\n            The simple model size comes out to about 48Kb, but some models can\\n            be as large as 20+MBs! It depends how simple you keep the model. If\\n            you want the model trained above, you get two files by{' '}\\n            <a\\n              className=\\\"pointy\\\"\\n              onClick={async () => {\\n                if (!this.model) return\\n                await this.model.save('downloads://rps-model')\\n              }}\\n            >\\n              clicking here\\n            </a>\\n            . The <span className=\\\"cod\\\">model.json</span> file demonstrates the\\n            structure of the model, and the weights are our non-random trained\\n            values that make the model accurate.\\n          </p>\\n          <h3>Now let's see if we can test our model with the real world!</h3>\\n          <img src=\\\"./rps_webcam_big.jpg\\\" className=\\\"demo\\\" alt=\\\"webcam demo\\\" />\\n          <p>\\n            Keep in mind, the training data for this model had no background,\\n            and the model itself isn't practiced in dealing with noise and\\n            rotation. A more advanced model would do better, but for this demo\\n            you shouldn't have any problems getting consistent and accurate\\n            results. When testing on a webcam, you'll need to make the images as\\n            clean as you can. Every few seconds your webcam image will be\\n            converted to a 64x64 grayscale image for your model to classify.\\n          </p>\\n          <button\\n            className=\\\"myButton\\\"\\n            onClick={async () => {\\n              // stop errors\\n              if (!this.model) return\\n              this.setState(\\n                prevState => ({\\n                  advancedDemo: false,\\n                  webcamActive: !prevState.webcamActive,\\n                  camMessage: ''\\n                }),\\n                this.detectWebcam\\n              )\\n            }}\\n          >\\n            {this.state.webcamActive ? 'Turn Webcam Off' : 'Launch Webcam'}\\n          </button>\\n          {this._renderWebcam()}\\n          <p>\\n            Did our model work for you? Maybe it did, and maybe it didn't! It's\\n            a very simple model that we've created on very simple data. Don't\\n            feel bad if it didn't work.\\n          </p>\\n          <p>\\n            What does it look like to train a far more advanced model for hours\\n            that results in a 20+MB model? Here's an opportunity for you to try\\n            it yourself! This model isn't as diverse, but for demo purposes it's\\n            inspiring!\\n          </p>\\n          <button\\n            className=\\\"myButton\\\"\\n            onClick={() => {\\n              this.setState(prevState => ({\\n                webcamActive: false,\\n                advancedDemo: !prevState.advancedDemo\\n              }))\\n            }}\\n          >\\n            {this.state.advancedDemo\\n              ? 'Turn Off Advanced Demo'\\n              : 'Show Advanced Demo'}\\n          </button>\\n          {this._renderAdvancedModel()}\\n          <p>\\n            Machine Learning is exciting! And now you're part of it, as you\\n            trained a model right in your browser. We've only scratched the\\n            surface of what you can build. Automating with ML on computers is\\n            only limited by our imagination!\\n          </p>\\n          <p>\\n            If you'd like to see more applications of TensorFlow.js be sure to\\n            check out{' '}\\n            <a\\n              href=\\\"https://nsfwjs.com\\\"\\n              target=\\\"_blank\\\"\\n              rel=\\\"noopener noreferrer\\\"\\n            >\\n              NSFWJS.com\\n            </a>\\n            , or the very useful{' '}\\n            <a\\n              href=\\\"https://nicornot.com\\\"\\n              target=\\\"_blank\\\"\\n              rel=\\\"noopener noreferrer\\\"\\n            >\\n              NicOrNot.com\\n            </a>\\n            . For more entertaining applications of Machine Learning, be sure to\\n            subscribe to our{' '}\\n            <a\\n              href=\\\"https://infinite.red/machinelearning\\\"\\n              target=\\\"_blank\\\"\\n              rel=\\\"noopener noreferrer\\\"\\n            >\\n              Newsletter\\n            </a>{' '}\\n            or follow my Fun Machine Learning Twitter account:\\n          </p>\\n\\n          <a\\n            href=\\\"https://twitter.com/FunMachineLearn\\\"\\n            target=\\\"_blank\\\"\\n            rel=\\\"noopener noreferrer\\\"\\n          >\\n            <img src=\\\"fml.png\\\" style={{ width: '50%', marginLeft: '25%' }} />\\n            <p style={{ textAlign: 'center' }}>@FunMachineLearn</p>\\n          </a>\\n        </div>\\n        <div className=\\\"GroupUp\\\">\\n          <p className=\\\"outro\\\">\\n            Follow me (Gant Laborde) and Infinite Red for cool new experiments,\\n            and let us know what cool things you've come up with.{' '}\\n            <em>\\n              We can help, we're available for AI consulting and training.\\n            </em>\\n          </p>\\n        </div>\\n        <div className=\\\"GroupUp\\\">\\n          <img src={gant} className=\\\"wiggle me\\\" alt=\\\"Gant Laborde\\\" />\\n          <ul id=\\\"footer\\\">\\n            <li>\\n              Website:{' '}\\n              <a\\n                href=\\\"http://gantlaborde.com\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"noopener noreferrer\\\"\\n              >\\n                GantLaborde.com\\n              </a>\\n            </li>\\n            <li>\\n              Twitter:{' '}\\n              <a\\n                href=\\\"https://twitter.com/gantlaborde\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"noopener noreferrer\\\"\\n              >\\n                @GantLaborde\\n              </a>\\n            </li>\\n            <li>\\n              Medium:{' '}\\n              <a\\n                href=\\\"https://medium.freecodecamp.org/@gantlaborde\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"noopener noreferrer\\\"\\n              >\\n                GantLaborde\\n              </a>\\n            </li>\\n            <li>\\n              ML Twitter:{' '}\\n              <a\\n                href=\\\"https://twitter.com/FunMachineLearn\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"noopener noreferrer\\\"\\n              >\\n                FunMachineLearn\\n              </a>\\n            </li>\\n            <li>\\n              GitHub:{' '}\\n              <a\\n                href=\\\"https://github.com/GantMan/rps_tfjs_demo\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"noopener noreferrer\\\"\\n              >\\n                RPS TFJS Demo\\n              </a>\\n            </li>\\n            <li>\\n              Newsletter:{' '}\\n              <a\\n                href=\\\"https://infinite.red/machinelearning\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"noopener noreferrer\\\"\\n              >\\n                ML Newsletter\\n              </a>\\n            </li>\\n            <li>\\n              <a\\n                href=\\\"https://infinite.red\\\"\\n                target=\\\"_blank\\\"\\n                rel=\\\"noopener noreferrer\\\"\\n              >\\n                <img src=\\\"./ir.svg\\\" id=\\\"InfiniteRed\\\" alt=\\\"Infinite Red\\\" />\\n              </a>\\n            </li>\\n          </ul>\\n        </div>\\n        <div className=\\\"GroupUp\\\">\\n          <img src=\\\"./ml.png\\\" id=\\\"closer\\\" />\\n          <h4>powered by</h4>\\n          <img\\n            src=\\\"./TF_FullColor_Horizontal.png\\\"\\n            id=\\\"closer\\\"\\n            alt=\\\"Tensorflow logo\\\"\\n            style={{ paddingLeft: '-40px' }}\\n          />\\n        </div>\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default App\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\",\"module.exports = __webpack_public_path__ + \\\"static/media/corn.406020c8.png\\\";\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{100:function(e,t){},101:function(e,t){},152:function(e,t,a){\"use strict\";a.r(t);var n=a(8),r=a.n(n),o=a(61),i=a.n(o),s=(a(84),a(7)),c=a.n(s),l=a(10),d=a(2),u=a(3),m=a(5),f=a(4),h=a(6),p=a(62),v=a.n(p),b=a(63),g=a.n(b),w=(a(90),a(11)),y=a(9),k=Math.floor(2100),x=2520-k,E=function(){function e(){Object(d.a)(this,e),this.shuffledTrainIndex=0,this.shuffledTestIndex=0}return Object(u.a)(e,[{key:\"load\",value:function(){var e=Object(l.a)(c.a.mark(function e(){var t,a,n,r,o,i,s,l,d=this;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=new Image,a=document.createElement(\"canvas\"),n=a.getContext(\"2d\"),r=new Promise(function(e,r){t.crossOrigin=\"\",t.onload=function(){t.width=t.naturalWidth,t.height=t.naturalHeight;var r=new ArrayBuffer(123863040),o=Math.floor(.15*x);a.width=t.width,a.height=o;for(var i=0;i<2520/o;i++){var s=new Float32Array(r,i*o*4096*4*3,4096*o*3);n.drawImage(t,0,i*o,t.width,o,0,0,t.width,o);for(var c=n.getImageData(0,0,a.width,a.height),l=0,u=0;u<c.data.length;u+=4)for(var m=0;m<3;m++)s[l++]=c.data[u+m]/255}d.datasetImages=new Float32Array(r),e()},t.src=\"/data.png\"}),o=fetch(\"/labels_uint8\"),e.next=7,Promise.all([r,o]);case 7:return i=e.sent,s=Object(w.a)(i,2),s[0],l=s[1],e.t0=Uint8Array,e.next=14,l.arrayBuffer();case 14:e.t1=e.sent,this.datasetLabels=new e.t0(e.t1),this.trainIndices=y.util.createShuffledIndices(k),this.testIndices=y.util.createShuffledIndices(x),this.trainImages=this.datasetImages.slice(0,4096*k*3),this.testImages=this.datasetImages.slice(4096*k*3),this.trainLabels=this.datasetLabels.slice(0,3*k),this.testLabels=this.datasetLabels.slice(3*k);case 22:case\"end\":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:\"nextTrainBatch\",value:function(e){var t=this;return this.nextBatch(e,[this.trainImages,this.trainLabels],function(){return t.shuffledTrainIndex=(t.shuffledTrainIndex+1)%t.trainIndices.length,t.trainIndices[t.shuffledTrainIndex]})}},{key:\"nextTestBatch\",value:function(e){var t=this;return this.nextBatch(e,[this.testImages,this.testLabels],function(){return t.shuffledTestIndex=(t.shuffledTestIndex+1)%t.testIndices.length,t.testIndices[t.shuffledTestIndex]})}},{key:\"nextBatch\",value:function(e,t,a){for(var n=new Float32Array(4096*e*3),r=new Uint8Array(3*e),o=0;o<e;o++){var i=a(),s=4096*i*3,c=t[0].slice(s,s+12288);n.set(c,4096*o*3);var l=t[1].slice(3*i,3*i+3);r.set(l,3*o)}return{xs:y.tensor3d(n,[e,4096,3]),labels:y.tensor2d(r,[e,3])}}}]),e}(),M=function(){var e=y.sequential();e.add(y.layers.conv2d({inputShape:[64,64,3],kernelSize:3,padding:\"same\",filters:32,strides:1,activation:\"relu\",kernelInitializer:\"varianceScaling\"})),e.add(y.layers.maxPooling2d({poolSize:[2,2],strides:[2,2]})),e.add(y.layers.batchNormalization()),e.add(y.layers.dropout({rate:.25})),e.add(y.layers.conv2d({kernelSize:3,filters:64,padding:\"same\",strides:1,activation:\"relu\",kernelInitializer:\"varianceScaling\"})),e.add(y.layers.maxPooling2d({poolSize:[2,2],strides:[2,2]})),e.add(y.layers.batchNormalization()),e.add(y.layers.dropout({rate:.25})),e.add(y.layers.flatten()),e.add(y.layers.dense({units:512,kernelRegularizer:\"l1l2\",activation:\"relu\"}));e.add(y.layers.dense({units:3,kernelInitializer:\"varianceScaling\",activation:\"softmax\"}));var t=y.train.adam();return e.compile({optimizer:t,loss:\"categoricalCrossentropy\",metrics:[\"accuracy\"]}),e},S=function(){var e=y.sequential();e.add(y.layers.conv2d({inputShape:[64,64,3],kernelSize:5,filters:8,strides:1,activation:\"relu\",kernelInitializer:\"varianceScaling\"})),e.add(y.layers.maxPooling2d({poolSize:[2,2],strides:[2,2]})),e.add(y.layers.conv2d({kernelSize:5,filters:16,strides:1,activation:\"relu\",kernelInitializer:\"varianceScaling\"})),e.add(y.layers.maxPooling2d({poolSize:[2,2],strides:[2,2]})),e.add(y.layers.flatten());e.add(y.layers.dense({units:3,kernelInitializer:\"varianceScaling\",activation:\"softmax\"}));var t=y.train.adam();return e.compile({optimizer:t,loss:\"categoricalCrossentropy\",metrics:[\"accuracy\"]}),e},I=a(14),A=function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,n=I.show.fitCallbacks({name:\"Model Training\",styles:{height:\"1000px\"}},[\"loss\",\"acc\",\"val_acc\"]);I.visor().setActiveTab(\"Visor\");var r=y.tidy(function(){var e=t.nextTrainBatch(k);return[e.xs.reshape([k,64,64,3]),e.labels]}),o=Object(w.a)(r,2),i=o[0],s=o[1],c=y.tidy(function(){var e=t.nextTestBatch(x);return[e.xs.reshape([x,64,64,3]),e.labels]}),l=Object(w.a)(c,2),d=l[0],u=l[1];return e.fit(i,s,{batchSize:512,validationData:[d,u],epochs:a,shuffle:!0,callbacks:n})},j=[\"Rock\",\"Paper\",\"Scissors\"],N=function(){var e=Object(l.a)(c.a.mark(function e(t,a){var n,r,o,i,s,l=arguments;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=l.length>2&&void 0!==l[2]?l[2]:{},r=y.tidy(function(){a=y.browser.fromPixels(a);return y.image.resizeBilinear(a,[64,64],!0)}),o=y.tidy(function(){var e=r.reshape([1,64,64,3]);return t.predict(e)}),e.next=5,o.data();case 5:if(i=e.sent,!(s=n.feedbackCanvas)){e.next=10;break}return e.next=10,y.browser.toPixels(r.div(y.scalar(255)),s);case 10:return r.dispose(),o.dispose(),e.abrupt(\"return\",j.map(function(e,t){return{className:e,probability:i[t]}}));case 13:case\"end\":return e.stop()}},e)}));return function(t,a){return e.apply(this,arguments)}}(),T=function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:420,n=t.nextTestBatch(a),r=n.xs.reshape([a,64,64,3]),o=n.labels.argMax([-1]),i=e.predict(r).argMax([-1]);return r.dispose(),[i,o]},O=function(){var e=Object(l.a)(c.a.mark(function e(t,a){var n,r,o,i,s,l,d,u=arguments;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=u.length>2&&void 0!==u[2]?u[2]:\"Accuracy\",r=T(t,a),o=Object(w.a)(r,2),i=o[0],s=o[1],e.next=4,I.metrics.perClassAccuracy(s,i);case 4:l=e.sent,d={name:n,tab:\"Evaluation\"},I.show.perClassAccuracy(d,l,j),I.visor().setActiveTab(\"Evaluation\"),s.dispose();case 9:case\"end\":return e.stop()}},e)}));return function(t,a){return e.apply(this,arguments)}}(),_=function(){var e=Object(l.a)(c.a.mark(function e(t,a){var n,r,o,i,s,l,d,u=arguments;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=u.length>2&&void 0!==u[2]?u[2]:\"Confusion Matrix\",r=T(t,a),o=Object(w.a)(r,2),i=o[0],s=o[1],e.next=4,I.metrics.confusionMatrix(s,i);case 4:l=e.sent,d={name:n,tab:\"Evaluation\"},I.render.confusionMatrix(d,{values:l,tickLabels:j}),s.dispose();case 8:case\"end\":return e.stop()}},e)}));return function(t,a){return e.apply(this,arguments)}}(),B=function(){var e=Object(l.a)(c.a.mark(function e(t){var a,n;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:a=I.visor().surface({name:\"RPS Data Examples\",tab:\"Input Data\"}),n=t.nextTestBatch(42),y.unstack(n.xs).forEach(function(){var e=Object(l.a)(c.a.mark(function e(t){var n,r;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.reshape([64,64,3]),(r=document.createElement(\"canvas\")).width=64,r.height=64,r.style=\"margin: 4px;\",e.next=7,y.browser.toPixels(n,r);case 7:a.drawArea.appendChild(r),t.dispose(),n.dispose();case 10:case\"end\":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}());case 3:case\"end\":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),C=function(e){return{detect:function(t){var a=y.tidy(function(){return y.browser.fromPixels(t).expandDims(0)}),n=a.shape[1],r=a.shape[2];return e.executeAsync(a).then(function(e){var t=e[0].dataSync(),o=e[1].dataSync();a.dispose(),y.dispose(e);var i=function(e,t,a){for(var n=[],r=[],o=0;o<t;o++){for(var i=Number.MIN_VALUE,s=-1,c=0;c<a;c++)e[o*a+c]>i&&(i=e[o*a+c],s=c);n[o]=i,r[o]=s}return[n,r]}(t,e[0].shape[1],e[0].shape[2]),s=Object(w.a)(i,2),c=s[0],l=s[1],d=y.getBackend();y.setBackend(\"cpu\");var u=y.tidy(function(){var t=y.tensor2d(o,[e[1].shape[1],e[1].shape[3]]);return y.image.nonMaxSuppression(t,c,20,.5,.5)}),m=u.dataSync();return u.dispose(),y.setBackend(d),function(e,t,a,n,r,o){for(var i=r.length,s=[],c=0;c<i;c++){for(var l=[],d=0;d<4;d++)l[d]=a[4*r[c]+d];var u=l[0]*t,m=l[1]*e,f=l[2]*t,h=l[3]*e;l[0]=m,l[1]=u,l[2]=h-m,l[3]=f-u,s.push({bbox:l,class:o[r[c]],score:n[r[c]]})}return s}(r,n,o,c,m,l)})}}},L=function(e){function t(){var e,a;Object(d.a)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return(a=Object(m.a)(this,(e=Object(f.a)(t)).call.apply(e,[this].concat(o)))).videoRef=r.a.createRef(),a.canvasRef=r.a.createRef(),a.state={loading:!0},a.componentWillUnmount=function(){window.stream.getTracks().forEach(function(e){e.stop()}),window.stream=null},a.detectFrame=function(e,t,n){C(t).detect(e).then(function(r){a.renderPredictions(r,n),requestAnimationFrame(function(){a.canvasRef.current&&a.detectFrame(e,t,n)})})},a.renderPredictions=function(e,t){if(a.canvasRef.current){var n=a.canvasRef.current.getContext(\"2d\");n.clearRect(0,0,n.canvas.width,n.canvas.height);var r=\"16px sans-serif\";n.font=r,n.textBaseline=\"top\",e.forEach(function(e){var a=e.bbox[0],o=e.bbox[1],i=e.bbox[2],s=e.bbox[3],c=t[parseInt(e.class)];n.strokeStyle=\"#FF0000\",n.lineWidth=4,n.strokeRect(a,o,i,s),n.fillStyle=\"#FF0000\";var l=n.measureText(c).width,d=parseInt(r,10);n.fillRect(a,o,l+4,d+4)}),e.forEach(function(e){var a=e.bbox[0],r=e.bbox[1],o=t[parseInt(e.class)];n.fillStyle=\"#000000\",n.fillText(o,a,r)})}},a}return Object(h.a)(t,e),Object(u.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){var t=navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:\"user\"}}).then(function(t){return window.stream=t,e.videoRef.current.srcObject=t,new Promise(function(t,a){e.videoRef.current.onloadedmetadata=function(){t()}})}),a=y.loadGraphModel(\"/adv_rps/model.json\"),n=fetch(\"/adv_rps/labels.json\").then(function(e){return e.json()});Promise.all([a,n,t]).then(function(t){var a=Object(w.a)(t,2),n=a[0],r=a[1];e.setState({loading:!1}),e.detectFrame(e.videoRef.current,n,r)}).catch(function(e){console.error(e)})}}},{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"advancedContainer\"},this.state.loading&&r.a.createElement(\"p\",{id:\"advancedLoadText\"},\"Please wait, loading advanced model\"),r.a.createElement(\"video\",{className:\"advancedCam\",autoPlay:!0,playsInline:!0,muted:!0,ref:this.videoRef,width:\"600\",height:\"500\"}),r.a.createElement(\"canvas\",{className:\"advancedBox\",ref:this.canvasRef,width:\"600\",height:\"500\"}))}}]),t}(r.a.Component),D=2e3,R=function(e){function t(){var e,a;Object(d.a)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return(a=Object(m.a)(this,(e=Object(f.a)(t)).call.apply(e,[this].concat(o)))).state={currentModel:null,webcamActive:!1,camMessage:\"\",advancedDemo:!1,loadDataMessage:\"Load and Show Examples\"},a._renderAdvancedModel=function(){if(a.state.advancedDemo)return r.a.createElement(\"div\",null,r.a.createElement(L,{key:\"advancedDemo\"}),r.a.createElement(\"p\",null,\"Turn off ad-block where applicable\"))},a._renderWebcam=function(){if(a.state.webcamActive)return r.a.createElement(\"div\",{className:\"results\"},r.a.createElement(\"div\",null,\"64x64 Input\"),r.a.createElement(\"canvas\",{id:\"compVision\"}),r.a.createElement(\"div\",null,a.state.camMessage),r.a.createElement(v.a,{ref:a._refWeb,className:\"captureCam\"}))},a.detectWebcam=Object(l.a)(c.a.mark(function e(){var t,n,r,o,i;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.sleep(100);case 2:if(t=document.querySelectorAll(\".captureCam\"),n=document.getElementById(\"compVision\"),!t[0]){e.next=12;break}return r={feedbackCanvas:n},e.next=8,N(a.model,t[0],r);case 8:o=e.sent,i=o.map(function(e){return\" \".concat(e.className,\": %\").concat((100*e.probability).toFixed(2))}).toString(),a.setState({camMessage:i}),setTimeout(a.detectWebcam,D);case 12:case\"end\":return e.stop()}},e)})),a._refWeb=function(e){a.webcam=e},a}return Object(h.a)(t,e),Object(u.a)(t,[{key:\"componentDidMount\",value:function(){window.tf=y}},{key:\"sleep\",value:function(e){return new Promise(function(t){return setTimeout(t,e)})}},{key:\"render\",value:function(){var e=this;return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(\"header\",{className:\"App-header\"},r.a.createElement(\"h2\",null,\"Rock Paper Scissors\"),r.a.createElement(\"h3\",null,\"Machine Learning in the browser with TFJS\"),r.a.createElement(\"img\",{src:\"./rps_circle.png\",className:\"App-logo\",alt:\"logo\",id:\"logo\"}),r.a.createElement(\"a\",{className:\"App-link\",href:\"https://infinite.red\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Infinite Red\"),r.a.createElement(\"a\",{className:\"App-link\",href:\"http://gantlaborde.com/\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Gant Laborde\")),r.a.createElement(\"div\",{className:\"Main\"},r.a.createElement(\"p\",null,'We\\'ll be working with a fun dataset for the classic game, \"Rock Paper Scissors\", provided here:',\" \",r.a.createElement(\"a\",{href:\"http://www.laurencemoroney.com/rock-paper-scissors-dataset/\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Rock Paper Scissors Dataset\")),r.a.createElement(\"img\",{src:\"./rps.jpg\",alt:\"Rock Paper Scissors dataset\"}),r.a.createElement(\"p\",null,\"We'll show progress in the TensorFlow.js Vis panel. You'll see it when you click the load and show button below. Press\",\" \",r.a.createElement(\"span\",{className:\"cod\"},\"`\"),\" or \",r.a.createElement(\"span\",{className:\"cod\"},\"~\"),\" key to hide this menu.\"),r.a.createElement(\"button\",{className:\"myButton\",onClick:Object(l.a)(c.a.mark(function t(){var a;return c.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e.setState({loadDataMessage:\"Loading 10MB Data\"}),a=new E,e.data=a,t.next=5,a.load();case 5:return t.next=7,B(a);case 7:e.setState({loadDataMessage:\"Data Loaded!\"});case 8:case\"end\":return t.stop()}},t)}))},this.state.loadDataMessage),r.a.createElement(\"p\",null,\"Each of the examples have been loaded now. Due to this being a browser, the data is loaded with one\",\" \",r.a.createElement(\"a\",{href:\"./data.png\",target:\"_blank\",rel:\"noopener noreferrer\"},\"sprite-sheet\"),\" \",\"to get around sandboxing. My code to create sprite-sheets is available with\",\" \",r.a.createElement(\"a\",{href:\"https://github.com/GantMan/rps_tfjs_demo\",target:\"_blank\",rel:\"noopener noreferrer\"},\"this repo on GitHub\"),\".\"),r.a.createElement(\"p\",null,\"You now create the structure for the data, that hopefully works best.\",\" \",r.a.createElement(\"strong\",null,\"In this situation, an advanced model is a bad choice.\"),\" \",\"An advanced model will train slower while overfitting this small and simple training data.\"),r.a.createElement(\"div\",{className:\"GroupUp\"},r.a.createElement(\"button\",{className:\"Simple\"===this.state.currentModel?\"myButton activeModel\":\"myButton\",onClick:Object(l.a)(c.a.mark(function t(){var a;return c.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e.setState({currentModel:\"Simple\"}),a=S(),I.show.modelSummary({name:\"Simple Model Architecture\"},a),e.model=a;case 4:case\"end\":return t.stop()}},t)}))},\"Create Simple Model\"),r.a.createElement(\"button\",{className:\"Advanced\"===this.state.currentModel?\"myButton activeModel\":\"myButton\",onClick:Object(l.a)(c.a.mark(function t(){var a;return c.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e.setState({currentModel:\"Advanced\"}),a=M(),I.show.modelSummary({name:\"Advanced Model Architecture\"},a),e.model=a;case 4:case\"end\":return t.stop()}},t)}))},\"Create Advanced Model\")),r.a.createElement(\"p\",null,\"Creating a model, is the structure and blueprint. It starts off able to, but terrible at predicting.\"),r.a.createElement(\"button\",{className:\"myButton\",onClick:Object(l.a)(c.a.mark(function t(){return c.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e.data){t.next=2;break}return t.abrupt(\"return\");case 2:if(e.model){t.next=4;break}return t.abrupt(\"return\");case 4:return t.next=6,O(e.model,e.data);case 6:return t.next=8,_(e.model,e.data,\"Untrained Matrix\");case 8:case\"end\":return t.stop()}},t)}))},\"Check Untrained Model Results\"),r.a.createElement(\"p\",null,\"Train your Model with your training data. In this case 2100 labeled images, over and over... but not \",r.a.createElement(\"em\",null,\"toooooo much.\")),r.a.createElement(\"button\",{className:\"myButton\",onClick:Object(l.a)(c.a.mark(function t(){var a;return c.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e.data){t.next=2;break}return t.abrupt(\"return\");case 2:if(e.model){t.next=4;break}return t.abrupt(\"return\");case 4:return a=\"Simple\"===e.state.currentModel?12:20,t.next=7,A(e.model,e.data,a);case 7:case\"end\":return t.stop()}},t)}))},\"Train Your \",this.state.currentModel,\" Model\"),r.a.createElement(\"p\",null,\"Now that our model has seen some stuff\",\" \",r.a.createElement(\"span\",{role:\"img\",\"aria-label\":\"woah\"},\"\\ud83d\\ude33\"),r.a.createElement(\"hr\",null),\"It should be smarter at identifying RPS! We can now test it with 420 RPS images it's never seen before.\"),r.a.createElement(\"button\",{className:\"myButton\",onClick:Object(l.a)(c.a.mark(function t(){return c.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e.data){t.next=2;break}return t.abrupt(\"return\");case 2:if(e.model){t.next=4;break}return t.abrupt(\"return\");case 4:return t.next=6,O(e.model,e.data,\"Trained Accuracy\");case 6:return t.next=8,_(e.model,e.data,\"Trained Confusion Matrix\");case 8:case\"end\":return t.stop()}},t)}))},\"Check Model After Training\"),r.a.createElement(\"p\",null,\"We can now save our trained model! We can store it via downloading it, uploading it, or place the results in localstorage for access of the browser.\"),r.a.createElement(\"p\",null,\"The simple model size comes out to about 48Kb, but some models can be as large as 20+MBs! It depends how simple you keep the model. If you want the model trained above, you get two files by\",\" \",r.a.createElement(\"a\",{className:\"pointy\",onClick:Object(l.a)(c.a.mark(function t(){return c.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e.model){t.next=2;break}return t.abrupt(\"return\");case 2:return t.next=4,e.model.save(\"downloads://rps-model\");case 4:case\"end\":return t.stop()}},t)}))},\"clicking here\"),\". The \",r.a.createElement(\"span\",{className:\"cod\"},\"model.json\"),\" file demonstrates the structure of the model, and the weights are our non-random trained values that make the model accurate.\"),r.a.createElement(\"h3\",null,\"Now let's see if we can test our model with the real world!\"),r.a.createElement(\"img\",{src:\"./rps_webcam_big.jpg\",className:\"demo\",alt:\"webcam demo\"}),r.a.createElement(\"p\",null,\"Keep in mind, the training data for this model had no background, and the model itself isn't practiced in dealing with noise and rotation. A more advanced model would do better, but for this demo you shouldn't have any problems getting consistent and accurate results. When testing on a webcam, you'll need to make the images as clean as you can. Every few seconds your webcam image will be converted to a 64x64 grayscale image for your model to classify.\"),r.a.createElement(\"button\",{className:\"myButton\",onClick:Object(l.a)(c.a.mark(function t(){return c.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e.model){t.next=2;break}return t.abrupt(\"return\");case 2:e.setState(function(e){return{advancedDemo:!1,webcamActive:!e.webcamActive,camMessage:\"\"}},e.detectWebcam);case 3:case\"end\":return t.stop()}},t)}))},this.state.webcamActive?\"Turn Webcam Off\":\"Launch Webcam\"),this._renderWebcam(),r.a.createElement(\"p\",null,\"Did our model work for you? Maybe it did, and maybe it didn't! It's a very simple model that we've created on very simple data. Don't feel bad if it didn't work.\"),r.a.createElement(\"p\",null,\"What does it look like to train a far more advanced model for hours that results in a 20+MB model? Here's an opportunity for you to try it yourself! This model isn't as diverse, but for demo purposes it's inspiring!\"),r.a.createElement(\"button\",{className:\"myButton\",onClick:function(){e.setState(function(e){return{webcamActive:!1,advancedDemo:!e.advancedDemo}})}},this.state.advancedDemo?\"Turn Off Advanced Demo\":\"Show Advanced Demo\"),this._renderAdvancedModel(),r.a.createElement(\"p\",null,\"Machine Learning is exciting! And now you're part of it, as you trained a model right in your browser. We've only scratched the surface of what you can build. Automating with ML on computers is only limited by our imagination!\"),r.a.createElement(\"p\",null,\"If you'd like to see more applications of TensorFlow.js be sure to check out\",\" \",r.a.createElement(\"a\",{href:\"https://nsfwjs.com\",target:\"_blank\",rel:\"noopener noreferrer\"},\"NSFWJS.com\"),\", or the very useful\",\" \",r.a.createElement(\"a\",{href:\"https://nicornot.com\",target:\"_blank\",rel:\"noopener noreferrer\"},\"NicOrNot.com\"),\". For more entertaining applications of Machine Learning, be sure to subscribe to our\",\" \",r.a.createElement(\"a\",{href:\"https://infinite.red/machinelearning\",target:\"_blank\",rel:\"noopener noreferrer\"},\"Newsletter\"),\" \",\"or follow my Fun Machine Learning Twitter account:\"),r.a.createElement(\"a\",{href:\"https://twitter.com/FunMachineLearn\",target:\"_blank\",rel:\"noopener noreferrer\"},r.a.createElement(\"img\",{src:\"fml.png\",style:{width:\"50%\",marginLeft:\"25%\"}}),r.a.createElement(\"p\",{style:{textAlign:\"center\"}},\"@FunMachineLearn\"))),r.a.createElement(\"div\",{className:\"GroupUp\"},r.a.createElement(\"p\",{className:\"outro\"},\"Follow me (Gant Laborde) and Infinite Red for cool new experiments, and let us know what cool things you've come up with.\",\" \",r.a.createElement(\"em\",null,\"We can help, we're available for AI consulting and training.\"))),r.a.createElement(\"div\",{className:\"GroupUp\"},r.a.createElement(\"img\",{src:g.a,className:\"wiggle me\",alt:\"Gant Laborde\"}),r.a.createElement(\"ul\",{id:\"footer\"},r.a.createElement(\"li\",null,\"Website:\",\" \",r.a.createElement(\"a\",{href:\"http://gantlaborde.com\",target:\"_blank\",rel:\"noopener noreferrer\"},\"GantLaborde.com\")),r.a.createElement(\"li\",null,\"Twitter:\",\" \",r.a.createElement(\"a\",{href:\"https://twitter.com/gantlaborde\",target:\"_blank\",rel:\"noopener noreferrer\"},\"@GantLaborde\")),r.a.createElement(\"li\",null,\"Medium:\",\" \",r.a.createElement(\"a\",{href:\"https://medium.freecodecamp.org/@gantlaborde\",target:\"_blank\",rel:\"noopener noreferrer\"},\"GantLaborde\")),r.a.createElement(\"li\",null,\"ML Twitter:\",\" \",r.a.createElement(\"a\",{href:\"https://twitter.com/FunMachineLearn\",target:\"_blank\",rel:\"noopener noreferrer\"},\"FunMachineLearn\")),r.a.createElement(\"li\",null,\"GitHub:\",\" \",r.a.createElement(\"a\",{href:\"https://github.com/GantMan/rps_tfjs_demo\",target:\"_blank\",rel:\"noopener noreferrer\"},\"RPS TFJS Demo\")),r.a.createElement(\"li\",null,\"Newsletter:\",\" \",r.a.createElement(\"a\",{href:\"https://infinite.red/machinelearning\",target:\"_blank\",rel:\"noopener noreferrer\"},\"ML Newsletter\")),r.a.createElement(\"li\",null,r.a.createElement(\"a\",{href:\"https://infinite.red\",target:\"_blank\",rel:\"noopener noreferrer\"},r.a.createElement(\"img\",{src:\"./ir.svg\",id:\"InfiniteRed\",alt:\"Infinite Red\"}))))),r.a.createElement(\"div\",{className:\"GroupUp\"},r.a.createElement(\"img\",{src:\"./ml.png\",id:\"closer\"}),r.a.createElement(\"h4\",null,\"powered by\"),r.a.createElement(\"img\",{src:\"./TF_FullColor_Horizontal.png\",id:\"closer\",alt:\"Tensorflow logo\",style:{paddingLeft:\"-40px\"}})))}}]),t}(n.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(r.a.createElement(R,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},63:function(e,t,a){e.exports=a.p+\"static/media/corn.406020c8.png\"},79:function(e,t,a){e.exports=a(152)},84:function(e,t,a){},90:function(e,t,a){},96:function(e,t){},97:function(e,t){},98:function(e,t){},99:function(e,t){}},[[79,1,2]]]);","extractedComments":[]}